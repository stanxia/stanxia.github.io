{"meta":{"title":"小世界，大梦想","subtitle":"夏的onepiece","description":"随便说说","author":"夏","url":"https://stanxia.github.io"},"posts":[{"title":"完善ntp时间同步","slug":"完善ntp时间同步","date":"2017-02-14T08:19:58.000Z","updated":"2017-02-14T08:20:57.000Z","comments":true,"path":"2017/02/14/完善ntp时间同步/","link":"","permalink":"https://stanxia.github.io/2017/02/14/完善ntp时间同步/","excerpt":"","text":"问题1ntp同步时间过长 解决方案修改 /etc/ntp.conf 主节点配置： 12server ntp7.aliyun.com iburstrestrict ntp7.aliyun.com nomodify notrap noquery 从节点配置： 12restrict hadoop1(主机名) nomodify notrap noqueryserver hadoop1(主机名) iburst 问题2ntp时间同步之后，显示非中国时区 解决方案1cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime","raw":null,"content":null,"categories":[],"tags":[{"name":"ntp","slug":"ntp","permalink":"https://stanxia.github.io/tags/ntp/"}]},{"title":"zookeeper启动时数组越界异常","slug":"zookeeper启动时数组越界异常","date":"2017-02-14T05:39:29.000Z","updated":"2017-02-14T06:05:06.000Z","comments":true,"path":"2017/02/14/zookeeper启动时数组越界异常/","link":"","permalink":"https://stanxia.github.io/2017/02/14/zookeeper启动时数组越界异常/","excerpt":"","text":"问题 解决方案修改 ／zookeeper/conf/zoo.cfg文件修改端口号1vi /zookeeper/conf/zoo.cfg","raw":null,"content":null,"categories":[],"tags":[{"name":"zookeeper","slug":"zookeeper","permalink":"https://stanxia.github.io/tags/zookeeper/"}]},{"title":"kafka-server-properties参数详解","slug":"kafka-server-properties参数详解","date":"2017-02-13T06:01:39.000Z","updated":"2017-02-14T08:07:25.000Z","comments":true,"path":"2017/02/13/kafka-server-properties参数详解/","link":"","permalink":"https://stanxia.github.io/2017/02/13/kafka-server-properties参数详解/","excerpt":"","text":"server.properties参数说明 参数 说明 broker.id=0 每一个broker在集群中的唯一表示，要求是正数。当该服务器的IP地址发生改变时，broker.id没有变化，则不会影响consumers的消息情况 log.dirs=/data/kafka-logs kafka数据的存放地址，多个地址的话用逗号分割,多个目录分布在不同磁盘上可以提高读写性能 /data/kafka-logs-1，/data/kafka-logs-2 port =9092 broker server服务端口 message.max.bytes =6525000 表示消息体的最大大小，单位是字节 num.network.threads =4 broker处理消息的最大线程数，一般情况下数量为cpu核数 num.io.threads =8 broker处理磁盘IO的线程数，数值为cpu核数2倍 background.threads =4 一些后台任务处理的线程数，例如过期消息文件的删除等，一般情况下不需要去做修改 queued.max.requests =500 等待IO线程处理的请求队列最大数，若是等待IO的请求超过这个数值，那么会停止接受外部消息，应该是一种自我保护机制。 host.name broker的主机地址，若是设置了，那么会绑定到这个地址上，若是没有，会绑定到所有的接口上，并将其中之一发送到ZK socket.send.buffer.bytes=100*1024 socket的发送缓冲区，socket的调优参数SO_SNDBUFF socket.receive.buffer.bytes =100*1024 socket的接受缓冲区，socket的调优参数SO_RCVBUFF socket.request.max.bytes =10010241024 socket请求的最大数值，防止serverOOM，message.max.bytes必然要小于socket.request.max.bytes，会被topic创建时的指定参数覆盖 log.segment.bytes =102410241024 topic的分区是以一堆segment文件存储的，这个控制每个segment的大小，会被topic创建时的指定参数覆盖 log.roll.hours =24*7 这个参数会在日志segment没有达到log.segment.bytes设置的大小，也会强制新建一个segment会被 topic创建时的指定参数覆盖 log.cleanup.policy = delete 日志清理策略选择有：delete和compact主要针对过期数据的处理，或是日志文件达到限制的额度，会被 topic创建时的指定参数覆盖 log.retention.bytes=-1 topic每个分区的最大文件大小，一个topic的大小限制 = 分区数*log.retention.bytes。-1没有大小限log.retention.bytes和log.retention.minutes任意一个达到要求，都会执行删除，会被topic创建时的指定参数覆盖 log.retention.check.interval.ms=5minutes 文件大小检查的周期时间，是否处罚 log.cleanup.policy中设置的策略 log.cleaner.enable=false 是否开启日志清理 log.cleaner.threads = 2 日志清理运行的线程数 log.cleaner.io.max.bytes.per.second=None 日志清理时候处理的最大大小 log.cleaner.dedupe.buffer.size=50010241024 日志清理去重时候的缓存空间，在空间允许的情况下，越大越好 log.cleaner.io.buffer.size=512*1024 日志清理时候用到的IO块大小一般不需要修改 log.cleaner.io.buffer.load.factor =0.9 日志清理中hash表的扩大因子一般不需要修改 log.cleaner.backoff.ms =15000 检查是否处罚日志清理的间隔 log.cleaner.min.cleanable.ratio=0.5 日志清理的频率控制，越大意味着更高效的清理，同时会存在一些空间上的浪费，会被topic创建时的指定参数覆盖 log.cleaner.delete.retention.ms =1day 对于压缩的日志保留的最长时间，也是客户端消费消息的最长时间，同log.retention.minutes的区别在于一个控制未压缩数据，一个控制压缩后的数据。会被topic创建时的指定参数覆盖 log.index.size.max.bytes =1010241024 对于segment日志的索引文件大小限制，会被topic创建时的指定参数覆盖 log.index.interval.bytes =4096 当执行一个fetch操作后，需要一定的空间来扫描最近的offset大小，设置越大，代表扫描速度越快，但是也更好内存，一般情况下不需要搭理这个参数 log.flush.interval.messages=None log文件”sync”到磁盘之前累积的消息条数,因为磁盘IO操作是一个慢操作,但又是一个”数据可靠性”的必要手段,所以此参数的设置,需要在“**数据可靠性**”与”性能”之间做必要的权衡.如果此值过大,将会导致每次”fsync”的时间较长(IO阻塞),如果此值过小,将会导致“fsync”的次数较多,这也意味着整体的client请求有一定的延迟.物理server故障,将会导致没有fsync的消息丢失. log.flush.scheduler.interval.ms =3000 检查是否需要固化到硬盘的时间间隔 log.flush.interval.ms = None 仅仅通过interval来控制消息的磁盘写入时机,是不足的.此参数用于控制“fsync”的时间间隔,如果消息量始终没有达到阀值,但是离上一次磁盘同步的时间间隔达到阀值,也将触发. log.delete.delay.ms =60000 文件在索引中清除后保留的时间一般不需要去修改 log.flush.offset.checkpoint.interval.ms =60000 控制上次固化硬盘的时间点，以便于数据恢复一般不需要去修改 auto.create.topics.enable =true 是否允许自动创建topic，若是false，就需要通过命令创建topic default.replication.factor =1 默认副本因子 num.partitions =1 每个topic的分区个数，若是在topic创建时候没有指定的话会被topic创建时的指定参数覆盖 以下是Leader，replicas配置 参数 说明 controller.message.queue.size=10 partition leader与replicas数据同步时,消息的队列尺寸 controller.socket.timeout.ms =30000 partition leader与replicas之间通讯时,socket的超时时间 replica.lag.time.max.ms =10000 replicas响应partition leader的最长等待时间，若是超过这个时间，就将replicas列入ISR(in-sync replicas)，并认为它是死的，不会再加入管理中 replica.lag.max.messages =4000 如果follower落后与leader太多,将会认为此follower[或者说partition relicas]已经失效， 通常,在follower与leader通讯时,因为网络延迟或者链接断开,总会导致replicas中消息同步滞后， 如果消息之后太多,leader将认为此follower网络延迟较大或者消息吞吐能力有限,将会把此replicas迁移， 到其他follower中， 在broker数量较少,或者网络不足的环境中,建议提高此值. replica.socket.timeout.ms=30*1000 follower与leader之间的socket超时时间 replica.socket.receive.buffer.bytes=64*1024 leader复制时候的socket缓存大小 replica.fetch.max.bytes =1024*1024 replicas每次获取数据的最大大小 replica.fetch.wait.max.ms =500 replicas同leader之间通信的最大等待时间，失败了会重试 replica.fetch.min.bytes =1 fetch的最小数据尺寸,如果leader中尚未同步的数据不足此值,将会阻塞,直到满足条件 num.replica.fetchers=1 leader进行复制的线程数，增大这个数值会增加follower的IO replica.high.watermark.checkpoint.interval.ms =5000 每个replica检查是否将最高水位进行固化的频率 controlled.shutdown.enable =false 是否允许控制器关闭broker ,若是设置为true,会关闭所有在这个broker上的leader，并转移到其他broker controlled.shutdown.max.retries =3 控制器关闭的尝试次数 controlled.shutdown.retry.backoff.ms =5000 每次关闭尝试的时间间隔 leader.imbalance.per.broker.percentage =10 leader的不平衡比例，若是超过这个数值，会对分区进行重新的平衡 leader.imbalance.check.interval.seconds =300 检查leader是否不平衡的时间间隔 offset.metadata.max.bytes 客户端保留offset信息的最大空间大小 kafka中zookeeper参数配置 参数 说明 zookeeper.connect = localhost:2181 zookeeper集群的地址，可以是多个，多个之间用逗号分割hostname1:port1,hostname2:port2,hostname3:port3 zookeeper.session.timeout.ms=6000 ZooKeeper的最大超时时间，就是心跳的间隔，若是没有反映，那么认为已经死了，不易过大 zookeeper.connection.timeout.ms =6000 ZooKeeper的连接超时时间 zookeeper.sync.time.ms =2000 ZooKeeper集群中leader和follower之间的同步时间","raw":null,"content":null,"categories":[],"tags":[{"name":"kafka","slug":"kafka","permalink":"https://stanxia.github.io/tags/kafka/"}]},{"title":"kafka安装与简单的应用","slug":"kafka安装与简单的应用","date":"2017-02-13T06:01:39.000Z","updated":"2017-02-14T08:05:57.000Z","comments":true,"path":"2017/02/13/kafka安装与简单的应用/","link":"","permalink":"https://stanxia.github.io/2017/02/13/kafka安装与简单的应用/","excerpt":"","text":"安装 tar xzvf kafka-0.8.0-beta1-src.tgzcd kafka-0.8.0-beta1-src./sbt update./sbt package./sbt assembly-package-dependency首先开启zookeeper服务，因为kafka是基于zookeepernohup /opt/kafka/bin/zookeeper-server-start.sh /opt/kafka/config/zookeeper.properties &amp; 再开启kafkanohup /opt/kafka/bin/kafka-server-start.sh /opt/kafka/config/server.properties &amp; ps -ef | grep kafka | grep -v grep ps -ef | grep zookeeper | grep -v grep 创建topics/opt/kafka/bin/kafka-topics.sh –zookeeper 192.168.221.138:2181 –create –topic test –replication-factor 1 –partition 1 发消息bin/kafka-console-producer.sh –broker-list localhost:9092 –topic test &gt;/dev/null 收消息 bin/kafka-console-consumer.sh –zookeeper localhost:2181 –topic test –from-beginning 2&gt;/dev/null","raw":null,"content":null,"categories":[],"tags":[{"name":"kafka","slug":"kafka","permalink":"https://stanxia.github.io/tags/kafka/"}]},{"title":"第一阶段项目所用知识点","slug":"第一阶段项目所用知识点","date":"2017-02-12T15:08:05.000Z","updated":"2017-02-13T01:06:03.000Z","comments":true,"path":"2017/02/12/第一阶段项目所用知识点/","link":"","permalink":"https://stanxia.github.io/2017/02/12/第一阶段项目所用知识点/","excerpt":"","text":"在hive外部执行hive语句，可多条语句一起执行hive -e ‘’ 查看表结构：desc tablename; 查看详细表结构：desc formatted tablename; 创建表： CREATE TABLE IF NOT EXISTS xls.bank_xls(name STRING,cost INT)PARTITIONED BY (date STRING)ROW FORMAT DELIMITED FIELDS TERMINATED BY ‘ ‘; 创建一张和目标表结构一样的表CREATE TABLE IF NOT EXISTS xls.bank_xls LIKE wy.bank_wy; 删除表：DROP TABLE IF EXISTS xls.bank_xls; 清空表数据，但不删除表：TRUNCATE TABLE xls.bank_xlsx; 导入本地数据到hive表中：LOAD DATA INPATH ‘/tmp/xls/20170103_customer_tx.txt’ OVERWRITE INTO TABLE xls.bank_xls PARTITION (date=to_date(‘20170103’)); 查看表中的内容：SLELCT * FROM xls.bank_xls; SELECT name,sum(cost) FROM xls.bank_xls WHERE date=’20170105’ GROUP BY name; hdfs dfs -ls /user/hive/warehouse/xls.db/bank_xls hadoop jar /root/makebankrecord.jar MakeBankRecord hive -e “LOAD DATA LOCAL INPATH ‘/home/xls/‘“ 文件监听器nohup hadoop jar filemonitor.jar FileChangeMain /home/xls/ &amp; #获取到输出的结构ps -ef | grep $1 | grep -v grep | awk &#39;{print $1}&#39; 指定某用户的crontab操作crontab -u xls -e 编辑xls用户的crontabcrontab -u xls -r 删除xls用户的crontab","raw":null,"content":null,"categories":[],"tags":[{"name":"hive","slug":"hive","permalink":"https://stanxia.github.io/tags/hive/"}]},{"title":"cdh集群搭建","slug":"cdh集群搭建","date":"2017-02-11T03:03:55.000Z","updated":"2017-02-11T03:04:38.000Z","comments":true,"path":"2017/02/11/cdh集群搭建/","link":"","permalink":"https://stanxia.github.io/2017/02/11/cdh集群搭建/","excerpt":"","text":"1.如果存在jdk：卸载方式：rpm -qa | grep jdkrpm -e —nodeps 加上上面返回的结构 2.安装jdk：rpm -ivh jdk-7u80-linux-x64.rpm 3.配置hostnamevi /etc/sysconfig/networkNETWORKING=yesHOSTNAME=master 4.vi /etc/hostname #删除文件内容 ,然后输入master 5.修改host映射vi /etc/hosts 10.211.55.9 master #ipDress1为master服务器的IP地址 6.selinux 关闭vi /etc/sysconfig/selinuxSELINUX=disable 7.重启reboot 8.更改防火墙systemctl stop firewalldsystemctl disable firewalldsystemctl status firewalld 9.安装时间同步服务yum -y install ntpvi /etc/ntp.conf #注释掉所有的server..* 的指向 ，新添加一条可连接的ntp服务器server ntp.sjtu.edu.cn iburst #启动时间同步服务service ntpd start #执行命令ntpdate -u 1.asia.pool.ntp.org #重启时间同步服务service ntpd restart 10.ssh无密码登陆配置ssh-keygen -t rsa #一直使用默认 11.安装mysql #查看mysql是否意境安装：rpm -qa | grep mariadb #如果存在：cd #安装mysql依赖：yum install -y perl-Module-Install.noarch unzip .ziprpm -ivh .rpm #修改配置文件目录cp /usr/share/mysql/my-default.cnf /etc/my.cnf #在配置文件中增加以下配置并保存：vi /etc/my.cnfdefault-storage-engine = innodbinnodb_file_per_tablecollation-server = utf8_general_ciinit-connect = ‘SET NAMES utf8’character-set-server=utf8 #初始化数据库执行：/usr/bin/mysql_install_db #开启mysql服务：service mysql restart #查看mysql root 初始化密码：cat /root/.mysql_secret T1STjiM6A1TXQB5p #登陆mysql：mysql -u root -pSET PASSWORD=PASSWORD(‘123456’)#复制root的初始密码mysql下面执行：SET PASSWORDcd /=PASSWORD(‘123456’) #linux开启开机启动：chkconfig mysql on #linux下面执行 拷贝mysql-connector-java-5.1.25-bin.jar 到/usr/share/java/mysql-connector-java.jar #创建数据库：mysqlcreate database hive DEFAULT CHARSET utf8 COLLATE utf8_general_ci;create database amon DEFAULT CHARSET utf8 COLLATE utf8_general_ci;create database hue DEFAULT CHARSET utf8 COLLATE utf8_general_ci;create database monitor DEFAULT CHARSET utf8 COLLATE utf8_general_ci;create database oozie DEFAULT CHARSET utf8 COLLATE utf8_general_ci; use mysql;grant all on . to root@‘master’ Identified by ‘123456’;flush privileges; 12.安装cloudera-manager #解压cm tar 包到指定目录mkdir /opt/cloudera-managertar -zxvf cloudier-manager-centos7-cm5.6.0_x86_64.tar.gz -C/opt/cloudera-manager #创建cloudera-scm用户：[root@master cloudera-manager]# useradd –system –home=/opt/cloudera-manager/cm-5.6.0/run/cloudera-scm-server–no-create-home –shell=/bin/false –comment “Cloudera SCM User” cloudera-scm #在注解点创建cloudera-manager-server的本地元数据保存目录mkdir /var/cloudera-scm-serverchown cloudera-scm:cloudera-scm /var/cloudera-scm-serverchown cloudera-scm:cloudera-scm /opt/cloudera-manager #配置从节点cloudera-manager-agent 指向注解点服务器vi /opt/cloudera-manager/cm-5.6.0/etc/cloudera-scm-agent/config.ini #将server host改为CMS所在的主机名即master #注解点中创建parcel-repo 仓库目录：mkdir -p /opt/cloudera/parcel-repochown cloudera-scm:cloudera-scm/opt/cloudera/parcel-repocp CDH-5.6.0-1.cdh5.6.0.p0.18-el7.parcel CDH-5.6.0-1.cdh5.6.0.p0.18-el7.parcel.sha manifest.json /opt/cloudera/parcel-repo #所有节点创建parcel目录：mkdir -p /opt/cloudera/parcelschown cloudera-scm:cloudera-scm/opt/cloudera/parcels 13.初始化脚本配置数据库：/opt/cloudera-manager/cm-5.6.0/share/cmf/schema/scm_prepare_database.sh mysql -hmaster -uroot -p123456 —sim-host master scmdbn scmdbu scmdbp 14.启动注解点cloudera scm servercp /opt/cloudera-manager/cm-5.6.0/etc/init.d/cloudera-scm-server /etc/init.d/cloudera-scm-server #修改变量路径：vi /etc/init.d/cloudera-scm-server 将CMF_DEFAULTS=${CMF_DEFAULTS:-/etc/default}改为=/opt/cloudera-manager/cm-5.6.0/etc/default chkconfig cloudera-scm-server on #启动注解点cloudera scm server mkdir /opt/cloudera-manager/cm-5.6.0/run/cloudera-scm-agentcp /opt/cloudera-manager/cm-5.6.0/etc/init.d/cloudera-scm-agent /etc/init.d/cloudera-scm-agent #修改变量路径：vi /etc/init.d/cloudera-scm-agent #将CMF_DEFAULTS=${CMF_DEFAULTS:-/etc/default}改为=/opt/cloudera-manager/cm-5.6.0/etc/default chkconfig cloudera-scm-agent on service cloudera-scm-server start","raw":null,"content":null,"categories":[],"tags":[{"name":"hadoop","slug":"hadoop","permalink":"https://stanxia.github.io/tags/hadoop/"}]},{"title":"hadoop原生集群搭建","slug":"hadoop原生集群搭建","date":"2017-02-11T02:55:39.000Z","updated":"2017-02-11T02:56:53.000Z","comments":true,"path":"2017/02/11/hadoop原生集群搭建/","link":"","permalink":"https://stanxia.github.io/2017/02/11/hadoop原生集群搭建/","excerpt":"","text":"配置yarn-site.xml yarn.nodemanager.aux-services mapreduce_shuffle 配置mapred-site.xml mapreduce.framework.name yarn mapreduce.jobhistory.address monsterxls:10020 mapreduce.jobhistory.webapp.address monsterxls:19888 配置hdfs-site.xml dfs.replication 2 dfs.datanode.ipc.address 0.0.0.0:50020 dfs.datanode.http.address 0.0.0.0:50075 配置core-site.xml fs.default.name hdfs://monsterxls:9000 hadoop.tmp.dir /opt/tmp 配置hadoop-env.shexport JAVA_HOME=/opt/jdk1.8 配置yarn-env.shexport HADOOP_YARN_USER=/opt/hadoopL 配置/etc/profile:jdk hadoop环境变量 echo ‘export JAVA_HOME=/opt/jdk1.8’ &gt;&gt;/etc/profileecho ‘export HADOOP_HOME=/opt/hadoop’ &gt;&gt;/etc/profileecho ‘export PATH=$PATH:$JAVA_HOME/bin:$HADOOP_HOME/bin’ &gt;&gt;/etc/profilesource /etc/profile 配置/etc/ntp.conf时间同步yum -y install ntpserver ntp7.aliyun.com iburst service ntpd startntpdate -u ntp7.aliyun.comservice ntpd restartntpstat 192.168.221.136 monsterxls192.168.221.135 slave1xls192.168.221.137 slave2xls配置/etc/hostname,/etc/hostsecho ‘monsterxls’ &gt;/etc/hostnameecho ‘192.168.221.136 monsterxls’ &gt;&gt;/etc/hosts 配置/etc/sysconfig/networkecho ‘NETWORKING=yes’ &gt;&gt;/etc/sysconfig/networkecho ‘HOSTNAME=slave2xls’ &gt;&gt;/etc/sysconfig/network 关闭防火墙systemctl stop firewalldsystemctl disable firewalldsystemctl status firewalld 添加hadoop用户adduser hadooppasswd hadoop将hadoop用户放在root组usermod -g root hadoop 解压hadoop.tar.gz和jdktar -zxvf jdk1.8.gz -C /opt/tar -zxvf hadoop-2.6.0.tar.gz -C /opt/ ssh相互通信ssh-keygen -t rsa -P ‘’scp -r id_rsa.pub root@slave1xls:/home/hadoop/.ssh/authorized_keys","raw":null,"content":null,"categories":[],"tags":[{"name":"hadoop","slug":"hadoop","permalink":"https://stanxia.github.io/tags/hadoop/"}]},{"title":"ssh互信","slug":"ssh互信","date":"2017-02-11T01:58:28.000Z","updated":"2017-02-11T02:41:30.000Z","comments":true,"path":"2017/02/11/ssh互信/","link":"","permalink":"https://stanxia.github.io/2017/02/11/ssh互信/","excerpt":"","text":"1.ssh-keygen -t rsa -P ‘’-t rsa表示通过rsa算法-P表示设置密码 cd .ssh :包含文件 idrsa为密匙 idrsa.pub为公钥 如果当前使用的用户时hadoop，当使用ssh切换时默认的是到hadoop用户 ，可以使用ssh root@hadoop 2.跨机器传输：scp 文件 hadoop@hadoop1:/目标路径 scp idrsa.pub hadoop@hadoop1:/home/hadoop/文件夹为：scp -r …","raw":null,"content":null,"categories":[],"tags":[{"name":"hadoop","slug":"hadoop","permalink":"https://stanxia.github.io/tags/hadoop/"}]}]}