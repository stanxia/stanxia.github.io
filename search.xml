<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[火之意志]]></title>
      <url>https://stanxia.github.io/2022/10/27/%E7%81%AB%E4%B9%8B%E6%84%8F%E5%BF%97/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><!--请开始装逼-->
<div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 50%;"><img src="http://oapjp6spr.bkt.clouddn.com/196232.jpg" alt=""></div><div class="group-picture-column" style="width: 50%;"><img src="http://oapjp6spr.bkt.clouddn.com/224147.jpg" alt=""></div></div><div class="group-picture-row"><div class="group-picture-column" style="width: 50%;"><img src="http://oapjp6spr.bkt.clouddn.com/199301.jpg" alt=""></div><div class="group-picture-column" style="width: 50%;"><img src="http://oapjp6spr.bkt.clouddn.com/213318.jpg" alt=""></div></div></div></div>
<!--对不起，到时间了，请停止装逼-->
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JavaRDDLike.scala]]></title>
      <url>https://stanxia.github.io/2017/11/21/JavaRDDLike-scala/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p><img src="http://oliji9s3j.bkt.clouddn.com/15113306611254.jpg" alt=""><br><div class="note info"><p>使用Java开发Spark程序，JavaRDD的功能算子中英文注释</p>
<p>JavaRDDLike的实现应该扩展这个虚拟抽象类，而不是直接继承这个特性。</p></div></p>
<a id="more"></a>
<!--请开始装逼-->
<h2 id="JavaRDD"><a href="#JavaRDD" class="headerlink" title="JavaRDD"></a>JavaRDD</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.apache.spark.api.java</div><div class="line"></div><div class="line"><span class="keyword">private</span>[spark] <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractJavaRDDLike</span>[<span class="type">T</span>, <span class="type">This</span> &lt;: <span class="type">JavaRDDLike</span>[<span class="type">T</span>, <span class="type">This</span>]]</span></div><div class="line">  <span class="keyword">extends</span> <span class="type">JavaRDDLike</span>[<span class="type">T</span>, <span class="type">This</span>]</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">  * Defines operations common to several Java RDD implementations.</div><div class="line">  *</div><div class="line">  * 定义几个Java RDD实现的常见操作。</div><div class="line">  *</div><div class="line">  * @note This trait is not intended to be implemented by user code.</div><div class="line">  *</div><div class="line">  *       该特性不打算由用户代码实现。</div><div class="line">  */</div><div class="line"><span class="class"><span class="keyword">trait</span> <span class="title">JavaRDDLike</span>[<span class="type">T</span>, <span class="type">This</span> &lt;: <span class="type">JavaRDDLike</span>[<span class="type">T</span>, <span class="type">This</span>]] <span class="keyword">extends</span> <span class="title">Serializable</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">wrapRDD</span></span>(rdd: <span class="type">RDD</span>[<span class="type">T</span>]): <span class="type">This</span></div><div class="line"></div><div class="line">  <span class="keyword">implicit</span> <span class="keyword">val</span> classTag: <span class="type">ClassTag</span>[<span class="type">T</span>]</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">rdd</span></span>: <span class="type">RDD</span>[<span class="type">T</span>]</div></pre></td></tr></table></figure>
<h3 id="partitions"><a href="#partitions" class="headerlink" title="partitions"></a>partitions</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/** Set of partitions in this RDD.</span></div><div class="line">  * 在这个RDD中设置的分区。</div><div class="line">  * */</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">partitions</span></span>: <span class="type">JList</span>[<span class="type">Partition</span>] = rdd.partitions.toSeq.asJava</div></pre></td></tr></table></figure>
<h3 id="getNumPartitions"><a href="#getNumPartitions" class="headerlink" title="getNumPartitions"></a>getNumPartitions</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/** Return the number of partitions in this RDD.</span></div><div class="line">  * 返回该RDD中的分区数。</div><div class="line">  * */</div><div class="line"><span class="meta">@Since</span>(<span class="string">"1.6.0"</span>)</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getNumPartitions</span></span>: <span class="type">Int</span> = rdd.getNumPartitions</div></pre></td></tr></table></figure>
<h3 id="partitioner"><a href="#partitioner" class="headerlink" title="partitioner"></a>partitioner</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/** The partitioner of this RDD.</span></div><div class="line">  * 这个RDD的分区。</div><div class="line">  * */</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">partitioner</span></span>: <span class="type">Optional</span>[<span class="type">Partitioner</span>] = <span class="type">JavaUtils</span>.optionToOptional(rdd.partitioner)</div></pre></td></tr></table></figure>
<h3 id="context"><a href="#context" class="headerlink" title="context"></a>context</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/** The [[org.apache.spark.SparkContext]] that this RDD was created on.</span></div><div class="line">  *</div><div class="line">  * 这个RDD是在[[org.apache.spark.SparkContext]]上面创建的。</div><div class="line">  * */</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">context</span></span>: <span class="type">SparkContext</span> = rdd.context</div></pre></td></tr></table></figure>
<h3 id="id"><a href="#id" class="headerlink" title="id"></a>id</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/** A unique ID for this RDD (within its SparkContext).</span></div><div class="line">  * 这个RDD的惟一ID(在它的SparkContext内)。</div><div class="line">  * */</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">id</span></span>: <span class="type">Int</span> = rdd.id</div></pre></td></tr></table></figure>
<h3 id="name"><a href="#name" class="headerlink" title="name"></a>name</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">name</span></span>(): <span class="type">String</span> = rdd.name</div></pre></td></tr></table></figure>
<h3 id="getStorageLevel"><a href="#getStorageLevel" class="headerlink" title="getStorageLevel"></a>getStorageLevel</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/** Get the RDD's current storage level, or StorageLevel.NONE if none is set.</span></div><div class="line">  * 获取RDD的当前存储级别，或StorageLevel。如果没有设置就没有。</div><div class="line">  * */</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getStorageLevel</span></span>: <span class="type">StorageLevel</span> = rdd.getStorageLevel</div></pre></td></tr></table></figure>
<h3 id="iterator"><a href="#iterator" class="headerlink" title="iterator"></a>iterator</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">  * Internal method to this RDD; will read from cache if applicable, or otherwise compute it.</div><div class="line">  * This should ''not'' be called by users directly, but is available for implementors of custom</div><div class="line">  * subclasses of RDD.</div><div class="line">  * 内部方法的RDD;将从缓存读取，如果适用的话，或者计算它。</div><div class="line">  * 这应该“不是”直接由用户调用，而是用于RDD的自定义子类的实现者</div><div class="line">  *</div><div class="line">  */</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">iterator</span></span>(split: <span class="type">Partition</span>, taskContext: <span class="type">TaskContext</span>): <span class="type">JIterator</span>[<span class="type">T</span>] =</div><div class="line">  rdd.iterator(split, taskContext).asJavs</div></pre></td></tr></table></figure>
<h2 id="Transformations-return-a-new-RDD"><a href="#Transformations-return-a-new-RDD" class="headerlink" title="Transformations (return a new RDD)"></a>Transformations (return a new RDD)</h2><h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">  * Return a new RDD by applying a function to all elements of this RDD.</div><div class="line">  * 将一个函数应用于这个RDD的所有元素，返回一个新的RDD。</div><div class="line">  *</div><div class="line">  */</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">map</span></span>[<span class="type">R</span>](f: <span class="type">JFunction</span>[<span class="type">T</span>, <span class="type">R</span>]): <span class="type">JavaRDD</span>[<span class="type">R</span>] =</div><div class="line">  <span class="keyword">new</span> <span class="type">JavaRDD</span>(rdd.map(f)(fakeClassTag))(fakeClassTag)</div></pre></td></tr></table></figure>
<h3 id="mapPartitionsWithIndex"><a href="#mapPartitionsWithIndex" class="headerlink" title="mapPartitionsWithIndex"></a>mapPartitionsWithIndex</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">  * Return a new RDD by applying a function to each partition of this RDD, while tracking the index</div><div class="line">  * of the original partition.</div><div class="line">  * 通过在RDD的每个分区上应用一个函数来返回一个新的RDD，同时跟踪原始分区的索引。</div><div class="line">  *</div><div class="line">  */</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">mapPartitionsWithIndex</span></span>[<span class="type">R</span>](</div><div class="line">                               f: <span class="type">JFunction2</span>[jl.<span class="type">Integer</span>, <span class="type">JIterator</span>[<span class="type">T</span>], <span class="type">JIterator</span>[<span class="type">R</span>]],</div><div class="line">                               preservesPartitioning: <span class="type">Boolean</span> = <span class="literal">false</span>): <span class="type">JavaRDD</span>[<span class="type">R</span>] =</div><div class="line">  <span class="keyword">new</span> <span class="type">JavaRDD</span>(rdd.mapPartitionsWithIndex((a, b) =&gt; f.call(a, b.asJava).asScala,</div><div class="line">    preservesPartitioning)(fakeClassTag))(fakeClassTag)</div></pre></td></tr></table></figure>
<h3 id="mapToDouble"><a href="#mapToDouble" class="headerlink" title="mapToDouble"></a>mapToDouble</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">  * Return a new RDD by applying a function to all elements of this RDD.</div><div class="line">  * 将一个函数应用于这个RDD的所有元素，返回一个新的RDD。</div><div class="line">  */</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">mapToDouble</span></span>[<span class="type">R</span>](f: <span class="type">DoubleFunction</span>[<span class="type">T</span>]): <span class="type">JavaDoubleRDD</span> = &#123;</div><div class="line">  <span class="keyword">new</span> <span class="type">JavaDoubleRDD</span>(rdd.map(f.call(_).doubleValue()))</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="mapToPair"><a href="#mapToPair" class="headerlink" title="mapToPair"></a>mapToPair</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">  * Return a new RDD by applying a function to all elements of this RDD.</div><div class="line">  * 将一个函数应用于这个RDD的所有元素，返回一个新的RDD。</div><div class="line">  *</div><div class="line">  */</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">mapToPair</span></span>[<span class="type">K2</span>, <span class="type">V2</span>](f: <span class="type">PairFunction</span>[<span class="type">T</span>, <span class="type">K2</span>, <span class="type">V2</span>]): <span class="type">JavaPairRDD</span>[<span class="type">K2</span>, <span class="type">V2</span>] = &#123;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">cm</span></span>: <span class="type">ClassTag</span>[(<span class="type">K2</span>, <span class="type">V2</span>)] = implicitly[<span class="type">ClassTag</span>[(<span class="type">K2</span>, <span class="type">V2</span>)]]</div><div class="line">  <span class="keyword">new</span> <span class="type">JavaPairRDD</span>(rdd.map[(<span class="type">K2</span>, <span class="type">V2</span>)](f)(cm))(fakeClassTag[<span class="type">K2</span>], fakeClassTag[<span class="type">V2</span>])</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="flatMap"><a href="#flatMap" class="headerlink" title="flatMap"></a>flatMap</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">  *  Return a new RDD by first applying a function to all elements of this</div><div class="line">  *  RDD, and then flattening the results.</div><div class="line">  *  返回一个新的RDD，首先将一个函数应用于这个RDD的所有元素，然后将结果扁平化。</div><div class="line">  *</div><div class="line">  */</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">flatMap</span></span>[<span class="type">U</span>](f: <span class="type">FlatMapFunction</span>[<span class="type">T</span>, <span class="type">U</span>]): <span class="type">JavaRDD</span>[<span class="type">U</span>] = &#123;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">fn</span></span>: (<span class="type">T</span>) =&gt; <span class="type">Iterator</span>[<span class="type">U</span>] = (x: <span class="type">T</span>) =&gt; f.call(x).asScala</div><div class="line">  <span class="type">JavaRDD</span>.fromRDD(rdd.flatMap(fn)(fakeClassTag[<span class="type">U</span>]))(fakeClassTag[<span class="type">U</span>])</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="flatMapToDouble"><a href="#flatMapToDouble" class="headerlink" title="flatMapToDouble"></a>flatMapToDouble</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">  *  Return a new RDD by first applying a function to all elements of this</div><div class="line">  *  RDD, and then flattening the results.</div><div class="line">  *  返回一个新的RDD，首先将一个函数应用于这个RDD的所有元素，然后将结果扁平化。</div><div class="line">  *</div><div class="line">  */</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">flatMapToDouble</span></span>(f: <span class="type">DoubleFlatMapFunction</span>[<span class="type">T</span>]): <span class="type">JavaDoubleRDD</span> = &#123;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">fn</span></span>: (<span class="type">T</span>) =&gt; <span class="type">Iterator</span>[jl.<span class="type">Double</span>] = (x: <span class="type">T</span>) =&gt; f.call(x).asScala</div><div class="line">  <span class="keyword">new</span> <span class="type">JavaDoubleRDD</span>(rdd.flatMap(fn).map(_.doubleValue()))</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="flatMapToPair"><a href="#flatMapToPair" class="headerlink" title="flatMapToPair"></a>flatMapToPair</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">  *  Return a new RDD by first applying a function to all elements of this</div><div class="line">  *  RDD, and then flattening the results.</div><div class="line">  *  返回一个新的RDD，首先将一个函数应用于这个RDD的所有元素，然后将结果扁平化。</div><div class="line">  *</div><div class="line">  */</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">flatMapToPair</span></span>[<span class="type">K2</span>, <span class="type">V2</span>](f: <span class="type">PairFlatMapFunction</span>[<span class="type">T</span>, <span class="type">K2</span>, <span class="type">V2</span>]): <span class="type">JavaPairRDD</span>[<span class="type">K2</span>, <span class="type">V2</span>] = &#123;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">fn</span></span>: (<span class="type">T</span>) =&gt; <span class="type">Iterator</span>[(<span class="type">K2</span>, <span class="type">V2</span>)] = (x: <span class="type">T</span>) =&gt; f.call(x).asScala</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">cm</span></span>: <span class="type">ClassTag</span>[(<span class="type">K2</span>, <span class="type">V2</span>)] = implicitly[<span class="type">ClassTag</span>[(<span class="type">K2</span>, <span class="type">V2</span>)]]</div><div class="line">  <span class="type">JavaPairRDD</span>.fromRDD(rdd.flatMap(fn)(cm))(fakeClassTag[<span class="type">K2</span>], fakeClassTag[<span class="type">V2</span>])</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="mapPartitions"><a href="#mapPartitions" class="headerlink" title="mapPartitions"></a>mapPartitions</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">  * Return a new RDD by applying a function to each partition of this RDD.</div><div class="line">  * 通过将一个函数应用于这个RDD的每个分区，返回一个新的RDD。</div><div class="line">  *</div><div class="line">  */</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">mapPartitions</span></span>[<span class="type">U</span>](f: <span class="type">FlatMapFunction</span>[<span class="type">JIterator</span>[<span class="type">T</span>], <span class="type">U</span>]): <span class="type">JavaRDD</span>[<span class="type">U</span>] = &#123;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">fn</span></span>: (<span class="type">Iterator</span>[<span class="type">T</span>]) =&gt; <span class="type">Iterator</span>[<span class="type">U</span>] = &#123;</div><div class="line">    (x: <span class="type">Iterator</span>[<span class="type">T</span>]) =&gt; f.call(x.asJava).asScala</div><div class="line">  &#125;</div><div class="line">  <span class="type">JavaRDD</span>.fromRDD(rdd.mapPartitions(fn)(fakeClassTag[<span class="type">U</span>]))(fakeClassTag[<span class="type">U</span>])</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">  * Return a new RDD by applying a function to each partition of this RDD.</div><div class="line">  * 通过将一个函数应用于这个RDD的每个分区，返回一个新的RDD。</div><div class="line">  *</div><div class="line">  */</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">mapPartitions</span></span>[<span class="type">U</span>](f: <span class="type">FlatMapFunction</span>[<span class="type">JIterator</span>[<span class="type">T</span>], <span class="type">U</span>],</div><div class="line">                     preservesPartitioning: <span class="type">Boolean</span>): <span class="type">JavaRDD</span>[<span class="type">U</span>] = &#123;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">fn</span></span>: (<span class="type">Iterator</span>[<span class="type">T</span>]) =&gt; <span class="type">Iterator</span>[<span class="type">U</span>] = &#123;</div><div class="line">    (x: <span class="type">Iterator</span>[<span class="type">T</span>]) =&gt; f.call(x.asJava).asScala</div><div class="line">  &#125;</div><div class="line">  <span class="type">JavaRDD</span>.fromRDD(</div><div class="line">    rdd.mapPartitions(fn, preservesPartitioning)(fakeClassTag[<span class="type">U</span>]))(fakeClassTag[<span class="type">U</span>])</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="mapPartitionsToDouble"><a href="#mapPartitionsToDouble" class="headerlink" title="mapPartitionsToDouble"></a>mapPartitionsToDouble</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">  * Return a new RDD by applying a function to each partition of this RDD.</div><div class="line">  * 通过将一个函数应用于这个RDD的每个分区，返回一个新的RDD。</div><div class="line">  *</div><div class="line">  */</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">mapPartitionsToDouble</span></span>(f: <span class="type">DoubleFlatMapFunction</span>[<span class="type">JIterator</span>[<span class="type">T</span>]]): <span class="type">JavaDoubleRDD</span> = &#123;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">fn</span></span>: (<span class="type">Iterator</span>[<span class="type">T</span>]) =&gt; <span class="type">Iterator</span>[jl.<span class="type">Double</span>] = &#123;</div><div class="line">    (x: <span class="type">Iterator</span>[<span class="type">T</span>]) =&gt; f.call(x.asJava).asScala</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">new</span> <span class="type">JavaDoubleRDD</span>(rdd.mapPartitions(fn).map(_.doubleValue()))</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">  * Return a new RDD by applying a function to each partition of this RDD.</div><div class="line">  * 通过将一个函数应用于这个RDD的每个分区，返回一个新的RDD。</div><div class="line">  *</div><div class="line">  */</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">mapPartitionsToDouble</span></span>(f: <span class="type">DoubleFlatMapFunction</span>[<span class="type">JIterator</span>[<span class="type">T</span>]],</div><div class="line">                          preservesPartitioning: <span class="type">Boolean</span>): <span class="type">JavaDoubleRDD</span> = &#123;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">fn</span></span>: (<span class="type">Iterator</span>[<span class="type">T</span>]) =&gt; <span class="type">Iterator</span>[jl.<span class="type">Double</span>] = &#123;</div><div class="line">    (x: <span class="type">Iterator</span>[<span class="type">T</span>]) =&gt; f.call(x.asJava).asScala</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">new</span> <span class="type">JavaDoubleRDD</span>(rdd.mapPartitions(fn, preservesPartitioning)</div><div class="line">    .map(_.doubleValue()))</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="mapPartitionsToPair"><a href="#mapPartitionsToPair" class="headerlink" title="mapPartitionsToPair"></a>mapPartitionsToPair</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">  * Return a new RDD by applying a function to each partition of this RDD.</div><div class="line">  * 通过将一个函数应用于这个RDD的每个分区，返回一个新的RDD。</div><div class="line">  *</div><div class="line">  */</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">mapPartitionsToPair</span></span>[<span class="type">K2</span>, <span class="type">V2</span>](f: <span class="type">PairFlatMapFunction</span>[<span class="type">JIterator</span>[<span class="type">T</span>], <span class="type">K2</span>, <span class="type">V2</span>]):</div><div class="line"><span class="type">JavaPairRDD</span>[<span class="type">K2</span>, <span class="type">V2</span>] = &#123;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">fn</span></span>: (<span class="type">Iterator</span>[<span class="type">T</span>]) =&gt; <span class="type">Iterator</span>[(<span class="type">K2</span>, <span class="type">V2</span>)] = &#123;</div><div class="line">    (x: <span class="type">Iterator</span>[<span class="type">T</span>]) =&gt; f.call(x.asJava).asScala</div><div class="line">  &#125;</div><div class="line">  <span class="type">JavaPairRDD</span>.fromRDD(rdd.mapPartitions(fn))(fakeClassTag[<span class="type">K2</span>], fakeClassTag[<span class="type">V2</span>])</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">  * Return a new RDD by applying a function to each partition of this RDD.</div><div class="line">  * 通过将一个函数应用于这个RDD的每个分区，返回一个新的RDD。</div><div class="line">  *</div><div class="line">  */</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">mapPartitionsToPair</span></span>[<span class="type">K2</span>, <span class="type">V2</span>](f: <span class="type">PairFlatMapFunction</span>[<span class="type">JIterator</span>[<span class="type">T</span>], <span class="type">K2</span>, <span class="type">V2</span>],</div><div class="line">                                preservesPartitioning: <span class="type">Boolean</span>): <span class="type">JavaPairRDD</span>[<span class="type">K2</span>, <span class="type">V2</span>] = &#123;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">fn</span></span>: (<span class="type">Iterator</span>[<span class="type">T</span>]) =&gt; <span class="type">Iterator</span>[(<span class="type">K2</span>, <span class="type">V2</span>)] = &#123;</div><div class="line">    (x: <span class="type">Iterator</span>[<span class="type">T</span>]) =&gt; f.call(x.asJava).asScala</div><div class="line">  &#125;</div><div class="line">  <span class="type">JavaPairRDD</span>.fromRDD(</div><div class="line">    rdd.mapPartitions(fn, preservesPartitioning))(fakeClassTag[<span class="type">K2</span>], fakeClassTag[<span class="type">V2</span>])</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="foreachPartition"><a href="#foreachPartition" class="headerlink" title="foreachPartition"></a>foreachPartition</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">  * Applies a function f to each partition of this RDD.</div><div class="line">  * 将函数f应用于该RDD的每个分区。</div><div class="line">  *</div><div class="line">  */</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">foreachPartition</span></span>(f: <span class="type">VoidFunction</span>[<span class="type">JIterator</span>[<span class="type">T</span>]]): <span class="type">Unit</span> = &#123;</div><div class="line">  rdd.foreachPartition(x =&gt; f.call(x.asJava))</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="glom"><a href="#glom" class="headerlink" title="glom"></a>glom</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">  * Return an RDD created by coalescing all elements within each partition into an array.</div><div class="line">  * 返回一个RDD，它将每个分区中的所有元素合并到一个数组中。</div><div class="line">  *</div><div class="line">  */</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">glom</span></span>(): <span class="type">JavaRDD</span>[<span class="type">JList</span>[<span class="type">T</span>]] =</div><div class="line">  <span class="keyword">new</span> <span class="type">JavaRDD</span>(rdd.glom().map(_.toSeq.asJava))</div></pre></td></tr></table></figure>
<h3 id="cartesian"><a href="#cartesian" class="headerlink" title="cartesian"></a>cartesian</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">  * Return the Cartesian product of this RDD and another one, that is, the RDD of all pairs of</div><div class="line">  * elements (a, b) where a is in `this` and b is in `other`.</div><div class="line">  * 返回这个RDD和另一个的笛卡尔乘积，即所有元素对的RDD(a,b) ：a在该RDD中，b在另一个RDD中</div><div class="line">  *</div><div class="line">  */</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">cartesian</span></span>[<span class="type">U</span>](other: <span class="type">JavaRDDLike</span>[<span class="type">U</span>, _]): <span class="type">JavaPairRDD</span>[<span class="type">T</span>, <span class="type">U</span>] =</div><div class="line">  <span class="type">JavaPairRDD</span>.fromRDD(rdd.cartesian(other.rdd)(other.classTag))(classTag, other.classTag)</div></pre></td></tr></table></figure>
<h3 id="groupBy"><a href="#groupBy" class="headerlink" title="groupBy"></a>groupBy</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">  * Return an RDD of grouped elements. Each group consists of a key and a sequence of elements</div><div class="line">  * mapping to that key.</div><div class="line">  * 返回分组元素的RDD。</div><div class="line">  * 每个组由一个键和一个映射到该键的元素序列组成。</div><div class="line">  *</div><div class="line">  */</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">groupBy</span></span>[<span class="type">U</span>](f: <span class="type">JFunction</span>[<span class="type">T</span>, <span class="type">U</span>]): <span class="type">JavaPairRDD</span>[<span class="type">U</span>, <span class="type">JIterable</span>[<span class="type">T</span>]] = &#123;</div><div class="line">  <span class="comment">// The type parameter is U instead of K in order to work around a compiler bug; see SPARK-4459</span></div><div class="line">  <span class="comment">// 类型参数是U而不是K，是为了绕过编译器错误</span></div><div class="line">  <span class="keyword">implicit</span> <span class="keyword">val</span> ctagK: <span class="type">ClassTag</span>[<span class="type">U</span>] = fakeClassTag</div><div class="line">  <span class="keyword">implicit</span> <span class="keyword">val</span> ctagV: <span class="type">ClassTag</span>[<span class="type">JList</span>[<span class="type">T</span>]] = fakeClassTag</div><div class="line">  <span class="type">JavaPairRDD</span>.fromRDD(groupByResultToJava(rdd.groupBy(f)(fakeClassTag)))</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">  * Return an RDD of grouped elements. Each group consists of a key and a sequence of elements</div><div class="line">  * mapping to that key.</div><div class="line">  * 返回分组元素的RDD。</div><div class="line">  * 每个组由一个键和一个映射到该键的元素序列组成。</div><div class="line">  */</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">groupBy</span></span>[<span class="type">U</span>](f: <span class="type">JFunction</span>[<span class="type">T</span>, <span class="type">U</span>], numPartitions: <span class="type">Int</span>): <span class="type">JavaPairRDD</span>[<span class="type">U</span>, <span class="type">JIterable</span>[<span class="type">T</span>]] = &#123;</div><div class="line">  <span class="comment">// The type parameter is U instead of K in order to work around a compiler bug; see SPARK-4459</span></div><div class="line">  <span class="keyword">implicit</span> <span class="keyword">val</span> ctagK: <span class="type">ClassTag</span>[<span class="type">U</span>] = fakeClassTag</div><div class="line">  <span class="keyword">implicit</span> <span class="keyword">val</span> ctagV: <span class="type">ClassTag</span>[<span class="type">JList</span>[<span class="type">T</span>]] = fakeClassTag</div><div class="line">  <span class="type">JavaPairRDD</span>.fromRDD(groupByResultToJava(rdd.groupBy(f, numPartitions)(fakeClassTag[<span class="type">U</span>])))</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="pipe"><a href="#pipe" class="headerlink" title="pipe"></a>pipe</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">  * Return an RDD created by piping elements to a forked external process.</div><div class="line">  * 返回由管道元素调用外部程序返回新的RDD</div><div class="line">  *</div><div class="line">  */</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">pipe</span></span>(command: <span class="type">String</span>): <span class="type">JavaRDD</span>[<span class="type">String</span>] = &#123;</div><div class="line">  rdd.pipe(command)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">  * Return an RDD created by piping elements to a forked external process.</div><div class="line">  * 返回由管道元素调用外部程序返回新的RDD</div><div class="line">  *</div><div class="line">  */</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">pipe</span></span>(command: <span class="type">JList</span>[<span class="type">String</span>]): <span class="type">JavaRDD</span>[<span class="type">String</span>] = &#123;</div><div class="line">  rdd.pipe(command.asScala)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">  * Return an RDD created by piping elements to a forked external process.</div><div class="line">  * 返回由管道元素调用外部程序返回新的RDD</div><div class="line">  *</div><div class="line">  */</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">pipe</span></span>(command: <span class="type">JList</span>[<span class="type">String</span>], env: <span class="type">JMap</span>[<span class="type">String</span>, <span class="type">String</span>]): <span class="type">JavaRDD</span>[<span class="type">String</span>] = &#123;</div><div class="line">  rdd.pipe(command.asScala, env.asScala)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">  * Return an RDD created by piping elements to a forked external process.</div><div class="line">  * 返回由管道元素调用外部程序返回新的RDD</div><div class="line">  *</div><div class="line">  */</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">pipe</span></span>(command: <span class="type">JList</span>[<span class="type">String</span>],</div><div class="line">         env: <span class="type">JMap</span>[<span class="type">String</span>, <span class="type">String</span>],</div><div class="line">         separateWorkingDir: <span class="type">Boolean</span>,</div><div class="line">         bufferSize: <span class="type">Int</span>): <span class="type">JavaRDD</span>[<span class="type">String</span>] = &#123;</div><div class="line">  rdd.pipe(command.asScala, env.asScala, <span class="literal">null</span>, <span class="literal">null</span>, separateWorkingDir, bufferSize)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">  * Return an RDD created by piping elements to a forked external process.</div><div class="line">  * 返回由管道元素调用外部程序返回新的RDD</div><div class="line">  *</div><div class="line">  */</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">pipe</span></span>(command: <span class="type">JList</span>[<span class="type">String</span>],</div><div class="line">         env: <span class="type">JMap</span>[<span class="type">String</span>, <span class="type">String</span>],</div><div class="line">         separateWorkingDir: <span class="type">Boolean</span>,</div><div class="line">         bufferSize: <span class="type">Int</span>,</div><div class="line">         encoding: <span class="type">String</span>): <span class="type">JavaRDD</span>[<span class="type">String</span>] = &#123;</div><div class="line">  rdd.pipe(command.asScala, env.asScala, <span class="literal">null</span>, <span class="literal">null</span>, separateWorkingDir, bufferSize, encoding)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="zip"><a href="#zip" class="headerlink" title="zip"></a>zip</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">  * Zips this RDD with another one, returning key-value pairs with the first element in each RDD,</div><div class="line">  * second element in each RDD, etc. Assumes that the two RDDs have the *same number of</div><div class="line">  * partitions* and the *same number of elements in each partition* (e.g. one was made through</div><div class="line">  * a map on the other).</div><div class="line">  * 将此RDD与另一个RDD进行Zips，返回键值对，每个RDD中的第一个元素，每个RDD中的第二个元素，等等。</div><div class="line">  * 假设两个RDDs拥有相同数量的分区和每个分区中相同数量的元素</div><div class="line">  * (例如，一个是通过另一个map的)。</div><div class="line">  */</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">zip</span></span>[<span class="type">U</span>](other: <span class="type">JavaRDDLike</span>[<span class="type">U</span>, _]): <span class="type">JavaPairRDD</span>[<span class="type">T</span>, <span class="type">U</span>] = &#123;</div><div class="line">  <span class="type">JavaPairRDD</span>.fromRDD(rdd.zip(other.rdd)(other.classTag))(classTag, other.classTag)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="zipPartitions"><a href="#zipPartitions" class="headerlink" title="zipPartitions"></a>zipPartitions</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">  * Zip this RDD's partitions with one (or more) RDD(s) and return a new RDD by</div><div class="line">  * applying a function to the zipped partitions. Assumes that all the RDDs have the</div><div class="line">  * *same number of partitions*, but does *not* require them to have the same number</div><div class="line">  * of elements in each partition.</div><div class="line">  * 用一个(或多个)RDD(或多个)来压缩这个RDD的分区，并返回一个新的RDD将函数应用于压缩分区。</div><div class="line">  * 假设所有RDDs拥有相同数量的分区，但不要求它们在每个分区中拥有相同数量的元素。</div><div class="line">  */</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">zipPartitions</span></span>[<span class="type">U</span>, <span class="type">V</span>](</div><div class="line">                         other: <span class="type">JavaRDDLike</span>[<span class="type">U</span>, _],</div><div class="line">                         f: <span class="type">FlatMapFunction2</span>[<span class="type">JIterator</span>[<span class="type">T</span>], <span class="type">JIterator</span>[<span class="type">U</span>], <span class="type">V</span>]): <span class="type">JavaRDD</span>[<span class="type">V</span>] = &#123;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">fn</span></span>: (<span class="type">Iterator</span>[<span class="type">T</span>], <span class="type">Iterator</span>[<span class="type">U</span>]) =&gt; <span class="type">Iterator</span>[<span class="type">V</span>] = &#123;</div><div class="line">    (x: <span class="type">Iterator</span>[<span class="type">T</span>], y: <span class="type">Iterator</span>[<span class="type">U</span>]) =&gt; f.call(x.asJava, y.asJava).asScala</div><div class="line">  &#125;</div><div class="line">  <span class="type">JavaRDD</span>.fromRDD(</div><div class="line">    rdd.zipPartitions(other.rdd)(fn)(other.classTag, fakeClassTag[<span class="type">V</span>]))(fakeClassTag[<span class="type">V</span>])</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="zipWithUniqueId"><a href="#zipWithUniqueId" class="headerlink" title="zipWithUniqueId"></a>zipWithUniqueId</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">  * Zips this RDD with generated unique Long ids. Items in the kth partition will get ids k, n+k,</div><div class="line">  * 2*n+k, ..., where n is the number of partitions. So there may exist gaps, but this method</div><div class="line">  * won't trigger a spark job, which is different from [[org.apache.spark.rdd.RDD#zipWithIndex]].</div><div class="line">  * 用生成的唯一长的id来压缩这个RDD。</div><div class="line">  * 第k个分区的项将得到id k,n + k,2 *n+ k，…，其中n是分区数。</div><div class="line">  * 因此，可能存在差距，但这种方法不会触发spark作业，它与[org .apache.spark. spark.rdd. rdd. rdd # zipWithIndex]不同。</div><div class="line">  */</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">zipWithUniqueId</span></span>(): <span class="type">JavaPairRDD</span>[<span class="type">T</span>, jl.<span class="type">Long</span>] = &#123;</div><div class="line">  <span class="type">JavaPairRDD</span>.fromRDD(rdd.zipWithUniqueId()).asInstanceOf[<span class="type">JavaPairRDD</span>[<span class="type">T</span>, jl.<span class="type">Long</span>]]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="zipWithIndex"><a href="#zipWithIndex" class="headerlink" title="zipWithIndex"></a>zipWithIndex</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Zips this RDD with its element indices. The ordering is first based on the partition index</div><div class="line"> * and then the ordering of items within each partition. So the first item in the first</div><div class="line"> * partition gets index 0, and the last item in the last partition receives the largest index.</div><div class="line"> * This is similar to Scala's zipWithIndex but it uses Long instead of Int as the index type.</div><div class="line"> * This method needs to trigger a spark job when this RDD contains more than one partitions.</div><div class="line">  *</div><div class="line">  * 用它的元素索引来压缩这个RDD。</div><div class="line">  * 排序首先基于分区索引，然后是每个分区中的条目的排序。</div><div class="line">  * 因此，第一个分区中的第一个项的索引值为0，最后一个分区中的最后一个项得到最大的索引。</div><div class="line">  * 这类似于Scala的zipWithIndex，但它使用的是Long而不是Int作为索引类型。</div><div class="line">  * 当这个RDD包含多个分区时，这个方法需要触发一个spark作业。</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">zipWithIndex</span></span>(): <span class="type">JavaPairRDD</span>[<span class="type">T</span>, jl.<span class="type">Long</span>] = &#123;</div><div class="line">  <span class="type">JavaPairRDD</span>.fromRDD(rdd.zipWithIndex()).asInstanceOf[<span class="type">JavaPairRDD</span>[<span class="type">T</span>, jl.<span class="type">Long</span>]]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Actions-launch-a-job-to-return-a-value-to-the-user-program"><a href="#Actions-launch-a-job-to-return-a-value-to-the-user-program" class="headerlink" title="Actions (launch a job to return a value to the user program)"></a>Actions (launch a job to return a value to the user program)</h2><h3 id="foreach"><a href="#foreach" class="headerlink" title="foreach"></a>foreach</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">  * Applies a function f to all elements of this RDD.</div><div class="line">  * 将函数f应用于该RDD的所有元素。</div><div class="line">  */</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">foreach</span></span>(f: <span class="type">VoidFunction</span>[<span class="type">T</span>]) &#123;</div><div class="line">  rdd.foreach(x =&gt; f.call(x))</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="collect"><a href="#collect" class="headerlink" title="collect"></a>collect</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">  * Return an array that contains all of the elements in this RDD.</div><div class="line">  * 返回包含该RDD中所有元素的数组。</div><div class="line">  *</div><div class="line">  * @note this method should only be used if the resulting array is expected to be small, as</div><div class="line">  * all the data is loaded into the driver's memory.</div><div class="line">  * 该方法只在预期的数组很小的情况下使用，因为所有的数据都被加载到驱动程序的内存中。</div><div class="line">  */</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">collect</span></span>(): <span class="type">JList</span>[<span class="type">T</span>] =</div><div class="line">  rdd.collect().toSeq.asJava</div></pre></td></tr></table></figure>
<h3 id="toLocalIterator"><a href="#toLocalIterator" class="headerlink" title="toLocalIterator"></a>toLocalIterator</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">  * Return an iterator that contains all of the elements in this RDD.</div><div class="line">  * 返回包含该RDD中所有元素的迭代器。</div><div class="line">  *</div><div class="line">  * The iterator will consume as much memory as the largest partition in this RDD.</div><div class="line">  * 迭代器将消耗与此RDD中最大的分区一样多的内存。</div><div class="line">  */</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">toLocalIterator</span></span>(): <span class="type">JIterator</span>[<span class="type">T</span>] =</div><div class="line">  asJavaIteratorConverter(rdd.toLocalIterator).asJava</div></pre></td></tr></table></figure>
<h3 id="collectPartitions"><a href="#collectPartitions" class="headerlink" title="collectPartitions"></a>collectPartitions</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">/**</span></div><div class="line">  * Return an array that contains all of the elements in a specific partition of this RDD.</div><div class="line">  * 返回包含该RDD的特定分区中的所有元素的数组。</div><div class="line">  */</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">collectPartitions</span></span>(partitionIds: <span class="type">Array</span>[<span class="type">Int</span>]): <span class="type">Array</span>[<span class="type">JList</span>[<span class="type">T</span>]] = &#123;</div><div class="line">  <span class="comment">// This is useful for implementing `take` from other language frontends</span></div><div class="line">  <span class="comment">// like Python where the data is serialized.</span></div><div class="line">  <span class="comment">// 这有助于从其他语言的前沿实现“take”，如Python，数据被序列化。</span></div><div class="line">  <span class="keyword">val</span> res = context.runJob(rdd, (it: <span class="type">Iterator</span>[<span class="type">T</span>]) =&gt; it.toArray, partitionIds)</div><div class="line">  res.map(_.toSeq.asJava)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">  * Reduces the elements of this RDD using the specified commutative and associative binary</div><div class="line">  * operator.</div><div class="line">  * 使用指定的交换和关联二元运算符来减少该RDD的元素。</div><div class="line">  */</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">reduce</span></span>(f: <span class="type">JFunction2</span>[<span class="type">T</span>, <span class="type">T</span>, <span class="type">T</span>]): <span class="type">T</span> = rdd.reduce(f)</div></pre></td></tr></table></figure>
<h3 id="treeReduce"><a href="#treeReduce" class="headerlink" title="treeReduce"></a>treeReduce</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">  * Reduces the elements of this RDD in a multi-level tree pattern.</div><div class="line">  * 将此RDD的元素简化为多层树模式。</div><div class="line">  *</div><div class="line">  * @param depth suggested depth of the tree 建议树的深度</div><div class="line">  * @see [[org.apache.spark.api.java.JavaRDDLike#reduce]]</div><div class="line">  */</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">treeReduce</span></span>(f: <span class="type">JFunction2</span>[<span class="type">T</span>, <span class="type">T</span>, <span class="type">T</span>], depth: <span class="type">Int</span>): <span class="type">T</span> = rdd.treeReduce(f, depth)</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">  * [[org.apache.spark.api.java.JavaRDDLike#treeReduce]] 建议深度 2 .</div><div class="line">  */</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">treeReduce</span></span>(f: <span class="type">JFunction2</span>[<span class="type">T</span>, <span class="type">T</span>, <span class="type">T</span>]): <span class="type">T</span> = treeReduce(f, <span class="number">2</span>)</div></pre></td></tr></table></figure>
<h3 id="fold"><a href="#fold" class="headerlink" title="fold"></a>fold</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">/**</span></div><div class="line">  * Aggregate the elements of each partition, and then the results for all the partitions, using a</div><div class="line">  * given associative function and a neutral "zero value". The function</div><div class="line">  * op(t1, t2) is allowed to modify t1 and return it as its result value to avoid object</div><div class="line">  * allocation; however, it should not modify t2.</div><div class="line">  * 对每个分区的元素进行聚合，然后使用给定的关联函数和中立的“零值”，对所有分区进行结果。</div><div class="line">  * 函数op(t1,t2)被允许修改t1，并将其作为其结果值返回，以避免对象分配;但是，它不应该修改t2。</div><div class="line">  *</div><div class="line">  * This behaves somewhat differently from fold operations implemented for non-distributed</div><div class="line">  * collections in functional languages like Scala. This fold operation may be applied to</div><div class="line">  * partitions individually, and then fold those results into the final result, rather than</div><div class="line">  * apply the fold to each element sequentially in some defined ordering. For functions</div><div class="line">  * that are not commutative, the result may differ from that of a fold applied to a</div><div class="line">  * non-distributed collection.</div><div class="line">  * 这与在Scala等函数式语言中实现非分布式集合的折叠操作有一定的不同。</div><div class="line">  * 这个折叠操作可以单独应用于分区，然后将这些结果折叠到最终结果中，而不是在某些定义的排序中顺序地对每个元素进行折叠。</div><div class="line">  * 对于非交换的函数，结果可能与应用于非分布式集合的函数不同。</div><div class="line">  *</div><div class="line">  */</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fold</span></span>(zeroValue: <span class="type">T</span>)(f: <span class="type">JFunction2</span>[<span class="type">T</span>, <span class="type">T</span>, <span class="type">T</span>]): <span class="type">T</span> =</div><div class="line">  rdd.fold(zeroValue)(f)</div></pre></td></tr></table></figure>
<h3 id="aggregate"><a href="#aggregate" class="headerlink" title="aggregate"></a>aggregate</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">/**</span></div><div class="line">  * Aggregate the elements of each partition, and then the results for all the partitions, using</div><div class="line">  * given combine functions and a neutral "zero value". This function can return a different result</div><div class="line">  * type, U, than the type of this RDD, T. Thus, we need one operation for merging a T into an U</div><div class="line">  * and one operation for merging two U's, as in scala.TraversableOnce. Both of these functions are</div><div class="line">  * allowed to modify and return their first argument instead of creating a new U to avoid memory</div><div class="line">  * allocation.</div><div class="line">  * 对每个分区的元素进行聚合，然后使用给定的组合函数和一个中立的“零值”，对所有分区进行结果。</div><div class="line">  * 这个函数可以返回一个不同的结果类型U，而不是这个RDD的类型。</div><div class="line">  * 因此，我们需要一个操作来将一个T合并到一个U和一个合并两个U的操作，就像在scala . traversableonce中那样。</div><div class="line">  * 这两个函数都可以修改和返回第一个参数，而不是创建一个新的U，以避免内存分配。</div><div class="line">  *</div><div class="line">  */</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">aggregate</span></span>[<span class="type">U</span>](zeroValue: <span class="type">U</span>)(seqOp: <span class="type">JFunction2</span>[<span class="type">U</span>, <span class="type">T</span>, <span class="type">U</span>],</div><div class="line">                               combOp: <span class="type">JFunction2</span>[<span class="type">U</span>, <span class="type">U</span>, <span class="type">U</span>]): <span class="type">U</span> =</div><div class="line">  rdd.aggregate(zeroValue)(seqOp, combOp)(fakeClassTag[<span class="type">U</span>])</div></pre></td></tr></table></figure>
<h3 id="treeAggregate"><a href="#treeAggregate" class="headerlink" title="treeAggregate"></a>treeAggregate</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">  <span class="comment">/**</span></div><div class="line">  * Aggregates the elements of this RDD in a multi-level tree pattern.</div><div class="line">  * 将此RDD的元素聚集在多层树模式中。</div><div class="line">  *</div><div class="line">  * @param depth suggested depth of the tree  建议的树的深度</div><div class="line">  * @see [[org.apache.spark.api.java.JavaRDDLike#aggregate]]</div><div class="line">  */</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">treeAggregate</span></span>[<span class="type">U</span>](</div><div class="line">                      zeroValue: <span class="type">U</span>,</div><div class="line">                      seqOp: <span class="type">JFunction2</span>[<span class="type">U</span>, <span class="type">T</span>, <span class="type">U</span>],</div><div class="line">                      combOp: <span class="type">JFunction2</span>[<span class="type">U</span>, <span class="type">U</span>, <span class="type">U</span>],</div><div class="line">                      depth: <span class="type">Int</span>): <span class="type">U</span> = &#123;</div><div class="line">  rdd.treeAggregate(zeroValue)(seqOp, combOp, depth)(fakeClassTag[<span class="type">U</span>])</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">  * [[org.apache.spark.api.java.JavaRDDLike#treeAggregate]] with suggested depth 2.</div><div class="line">  * 建议的树的深度为 2</div><div class="line">  */</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">treeAggregate</span></span>[<span class="type">U</span>](</div><div class="line">                      zeroValue: <span class="type">U</span>,</div><div class="line">                      seqOp: <span class="type">JFunction2</span>[<span class="type">U</span>, <span class="type">T</span>, <span class="type">U</span>],</div><div class="line">                      combOp: <span class="type">JFunction2</span>[<span class="type">U</span>, <span class="type">U</span>, <span class="type">U</span>]): <span class="type">U</span> = &#123;</div><div class="line">  treeAggregate(zeroValue, seqOp, combOp, <span class="number">2</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="count"><a href="#count" class="headerlink" title="count"></a>count</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">  * Return the number of elements in the RDD.</div><div class="line">  * 返回RDD中元素的数量。</div><div class="line">  *</div><div class="line">  */</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">count</span></span>(): <span class="type">Long</span> = rdd.count()</div></pre></td></tr></table></figure>
<h3 id="countApprox"><a href="#countApprox" class="headerlink" title="countApprox"></a>countApprox</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">  <span class="comment">/**</span></div><div class="line">  * Approximate version of count() that returns a potentially incomplete result</div><div class="line">  * within a timeout, even if not all tasks have finished.</div><div class="line">  * 近似版本的count()，即使不是所有的任务都完成了，也会在一个超时中返回一个潜在的不完整的结果。</div><div class="line">  *</div><div class="line">  *</div><div class="line">  * The confidence is the probability that the error bounds of the result will</div><div class="line">  * contain the true value. That is, if countApprox were called repeatedly</div><div class="line">  * with confidence 0.9, we would expect 90% of the results to contain the</div><div class="line">  * true count. The confidence must be in the range [0,1] or an exception will</div><div class="line">  * be thrown.</div><div class="line">  * 置信值是结果的误差边界包含真实值的概率。</div><div class="line">  * 也就是说，如果countApprox被反复调用，confidence 0.9，我们将期望90%的结果包含真实的计数。</div><div class="line">  * confidence必须在范围[0,1]中，否则将抛出异常。</div><div class="line">  *</div><div class="line">  *</div><div class="line">  * @param timeout maximum time to wait for the job, in milliseconds</div><div class="line">  *                等待工作的最大时间，以毫秒为单位</div><div class="line">  * @param confidence the desired statistical confidence in the result</div><div class="line">  *                   对结果的期望的统计信心</div><div class="line">  * @return a potentially incomplete result, with error bounds</div><div class="line">  *         一个可能不完整的结果，有错误界限</div><div class="line">  */</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">countApprox</span></span>(timeout: <span class="type">Long</span>, confidence: <span class="type">Double</span>): <span class="type">PartialResult</span>[<span class="type">BoundedDouble</span>] =</div><div class="line">  rdd.countApprox(timeout, confidence)</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">  * Approximate version of count() that returns a potentially incomplete result</div><div class="line">  * within a timeout, even if not all tasks have finished.</div><div class="line">  * 近似版本的count()，即使不是所有的任务都完成了，也会在一个超时中返回一个潜在的不完整的结果。</div><div class="line">  *</div><div class="line">  *</div><div class="line">  * @param timeout maximum time to wait for the job, in milliseconds</div><div class="line">  *                等待工作的最大时间，以毫秒为单位</div><div class="line">  */</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">countApprox</span></span>(timeout: <span class="type">Long</span>): <span class="type">PartialResult</span>[<span class="type">BoundedDouble</span>] =</div><div class="line">  rdd.countApprox(timeout)</div></pre></td></tr></table></figure>
<h3 id="countByValue"><a href="#countByValue" class="headerlink" title="countByValue"></a>countByValue</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">  * Return the count of each unique value in this RDD as a map of (value, count) pairs. The final</div><div class="line">  * combine step happens locally on the master, equivalent to running a single reduce task.</div><div class="line">  * 将此RDD中的每个惟一值的计数作为(值、计数)对的映射。</div><div class="line">  * 最后的联合步骤在master的本地发生，相当于运行一个reduce任务。</div><div class="line">  *</div><div class="line">  */</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">countByValue</span></span>(): <span class="type">JMap</span>[<span class="type">T</span>, jl.<span class="type">Long</span>] =</div><div class="line">  mapAsSerializableJavaMap(rdd.countByValue()).asInstanceOf[<span class="type">JMap</span>[<span class="type">T</span>, jl.<span class="type">Long</span>]]</div></pre></td></tr></table></figure>
<h3 id="countByValueApprox"><a href="#countByValueApprox" class="headerlink" title="countByValueApprox"></a>countByValueApprox</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">  <span class="comment">/**</span></div><div class="line">  * Approximate version of countByValue().</div><div class="line">  * countByValue()近似的版本。</div><div class="line">  *</div><div class="line">  * The confidence is the probability that the error bounds of the result will</div><div class="line">  * contain the true value. That is, if countApprox were called repeatedly</div><div class="line">  * with confidence 0.9, we would expect 90% of the results to contain the</div><div class="line">  * true count. The confidence must be in the range [0,1] or an exception will</div><div class="line">  * be thrown.</div><div class="line">  * 置信值是结果的误差边界包含真实值的概率。</div><div class="line">  * 也就是说，如果countApprox被反复调用，confidence 0.9，我们将期望90%的结果包含真实的计数。</div><div class="line">  * confidence必须在范围[0,1]中，否则将抛出异常。</div><div class="line">  *</div><div class="line">  *</div><div class="line">  * @param timeout maximum time to wait for the job, in milliseconds</div><div class="line">  *                等待工作的最大时间，毫秒为单位。</div><div class="line">  * @param confidence the desired statistical confidence in the result</div><div class="line">  *                   对结果的期望的统计信心</div><div class="line">  * @return a potentially incomplete result, with error bounds</div><div class="line">  *         一个可能不完整的结果，有错误界限</div><div class="line">  */</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">countByValueApprox</span></span>(</div><div class="line">                        timeout: <span class="type">Long</span>,</div><div class="line">                        confidence: <span class="type">Double</span></div><div class="line">                      ): <span class="type">PartialResult</span>[<span class="type">JMap</span>[<span class="type">T</span>, <span class="type">BoundedDouble</span>]] =</div><div class="line">  rdd.countByValueApprox(timeout, confidence).map(mapAsSerializableJavaMap)</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">  * Approximate version of countByValue().</div><div class="line">  * countByValue().的近似版本.</div><div class="line">  *</div><div class="line">  * @param timeout maximum time to wait for the job, in milliseconds</div><div class="line">  *                等待工作的最大时间，毫秒为单位。</div><div class="line">  * @return a potentially incomplete result, with error bounds</div><div class="line">  *         一个可能不完整的结果，有错误界限</div><div class="line">  */</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">countByValueApprox</span></span>(timeout: <span class="type">Long</span>): <span class="type">PartialResult</span>[<span class="type">JMap</span>[<span class="type">T</span>, <span class="type">BoundedDouble</span>]] =</div><div class="line">  rdd.countByValueApprox(timeout).map(mapAsSerializableJavaMap)</div></pre></td></tr></table></figure>
<h3 id="take"><a href="#take" class="headerlink" title="take"></a>take</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">  <span class="comment">/**</span></div><div class="line">  * Take the first num elements of the RDD. This currently scans the partitions *one by one*, so</div><div class="line">  * it will be slow if a lot of partitions are required. In that case, use collect() to get the</div><div class="line">  * whole RDD instead.</div><div class="line">  * 获取RDD的第一个num元素。</div><div class="line">  * 这将会一次一个地扫描分区，所以如果需要很多分区，它将会很慢。</div><div class="line">  * 在这种情况下，使用collect()来获得整个RDD。</div><div class="line">  *</div><div class="line">  *</div><div class="line">  * @note this method should only be used if the resulting array is expected to be small, as</div><div class="line">  * all the data is loaded into the driver's memory.</div><div class="line">  * 该方法只在预期的数组很小的情况下使用，因为所有的数据都被加载到驱动程序的内存中。</div><div class="line">  *</div><div class="line">  */</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">take</span></span>(num: <span class="type">Int</span>): <span class="type">JList</span>[<span class="type">T</span>] =</div><div class="line">  rdd.take(num).toSeq.asJava</div></pre></td></tr></table></figure>
<h3 id="takeSample"><a href="#takeSample" class="headerlink" title="takeSample"></a>takeSample</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">takeSample</span></span>(withReplacement: <span class="type">Boolean</span>, num: <span class="type">Int</span>): <span class="type">JList</span>[<span class="type">T</span>] =</div><div class="line">  takeSample(withReplacement, num, <span class="type">Utils</span>.random.nextLong)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">takeSample</span></span>(withReplacement: <span class="type">Boolean</span>, num: <span class="type">Int</span>, seed: <span class="type">Long</span>): <span class="type">JList</span>[<span class="type">T</span>] =</div><div class="line">  rdd.takeSample(withReplacement, num, seed).toSeq.asJava</div></pre></td></tr></table></figure>
<h3 id="first"><a href="#first" class="headerlink" title="first"></a>first</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">  <span class="comment">/**</span></div><div class="line">  * Return the first element in this RDD.</div><div class="line">  * 返回这个RDD中的第一个元素。</div><div class="line">  */</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">first</span></span>(): <span class="type">T</span> = rdd.first()</div></pre></td></tr></table></figure>
<h3 id="isEmpty"><a href="#isEmpty" class="headerlink" title="isEmpty"></a>isEmpty</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">  * @return true if and only if the RDD contains no elements at all. Note that an RDD</div><div class="line">  *         may be empty even when it has at least 1 partition.</div><div class="line">  *         当且仅当RDD不包含任何元素，则为真。</div><div class="line">  *         请注意，即使在至少有一个分区的情况下，RDD也可能是空的。</div><div class="line">  */</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">isEmpty</span></span>(): <span class="type">Boolean</span> = rdd.isEmpty()</div></pre></td></tr></table></figure>
<h3 id="saveAsTextFile"><a href="#saveAsTextFile" class="headerlink" title="saveAsTextFile"></a>saveAsTextFile</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">  * Save this RDD as a text file, using string representations of elements.</div><div class="line">  * 将此RDD保存为文本文件，使用元素的字符串表示形式。</div><div class="line">  */</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">saveAsTextFile</span></span>(path: <span class="type">String</span>): <span class="type">Unit</span> = &#123;</div><div class="line">  rdd.saveAsTextFile(path)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">  * Save this RDD as a compressed text file, using string representations of elements.</div><div class="line">  * 将此RDD保存为一个压缩文本文件，使用元素的字符串表示形式。</div><div class="line">  */</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">saveAsTextFile</span></span>(path: <span class="type">String</span>, codec: <span class="type">Class</span>[_ &lt;: <span class="type">CompressionCodec</span>]): <span class="type">Unit</span> = &#123;</div><div class="line">  rdd.saveAsTextFile(path, codec)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="saveAsObjectFile"><a href="#saveAsObjectFile" class="headerlink" title="saveAsObjectFile"></a>saveAsObjectFile</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">  * Save this RDD as a SequenceFile of serialized objects.</div><div class="line">  * 将此RDD保存为序列化对象的序列文件。</div><div class="line">  */</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">saveAsObjectFile</span></span>(path: <span class="type">String</span>): <span class="type">Unit</span> = &#123;</div><div class="line">  rdd.saveAsObjectFile(path)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="keyBy"><a href="#keyBy" class="headerlink" title="keyBy"></a>keyBy</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">  * Creates tuples of the elements in this RDD by applying `f`.</div><div class="line">  * 通过应用“f”创建这个RDD中元素的元组。</div><div class="line">  */</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">keyBy</span></span>[<span class="type">U</span>](f: <span class="type">JFunction</span>[<span class="type">T</span>, <span class="type">U</span>]): <span class="type">JavaPairRDD</span>[<span class="type">U</span>, <span class="type">T</span>] = &#123;</div><div class="line">  <span class="comment">// The type parameter is U instead of K in order to work around a compiler bug; see SPARK-4459</span></div><div class="line">  <span class="comment">// 类型参数用U替代K，为了绕过编译器错误;</span></div><div class="line">  <span class="keyword">implicit</span> <span class="keyword">val</span> ctag: <span class="type">ClassTag</span>[<span class="type">U</span>] = fakeClassTag</div><div class="line">  <span class="type">JavaPairRDD</span>.fromRDD(rdd.keyBy(f))</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="checkpoint"><a href="#checkpoint" class="headerlink" title="checkpoint"></a>checkpoint</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">  * Mark this RDD for checkpointing. It will be saved to a file inside the checkpoint</div><div class="line">  * directory set with SparkContext.setCheckpointDir() and all references to its parent</div><div class="line">  * RDDs will be removed. This function must be called before any job has been</div><div class="line">  * executed on this RDD. It is strongly recommended that this RDD is persisted in</div><div class="line">  * memory, otherwise saving it on a file will require recomputation.</div><div class="line">  * 将此RDD标记为检查点。</div><div class="line">  * 它将被保存到由SparkContext.setCheckpointDir()设置的检查点目录下的文件中。</div><div class="line">  * 所有对其父RDDs的引用将被删除。</div><div class="line">  * 在此RDD上执行任何作业之前，必须调用此函数。</div><div class="line">  * 强烈建议将此RDD保存在内存中，否则将其保存在文件中需要重新计算。</div><div class="line">  *</div><div class="line">  */</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">checkpoint</span></span>(): <span class="type">Unit</span> = &#123;</div><div class="line">  rdd.checkpoint()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="isCheckpointed"><a href="#isCheckpointed" class="headerlink" title="isCheckpointed"></a>isCheckpointed</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">  * Return whether this RDD has been checkpointed or not</div><div class="line">  * 返回  RDD是否已被检查过</div><div class="line">  */</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">isCheckpointed</span></span>: <span class="type">Boolean</span> = rdd.isCheckpointed</div></pre></td></tr></table></figure>
<h3 id="getCheckpointFile"><a href="#getCheckpointFile" class="headerlink" title="getCheckpointFile"></a>getCheckpointFile</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">  * Gets the name of the file to which this RDD was checkpointed</div><div class="line">  * 获取该RDD所指向的checkpointed文件的名称</div><div class="line">  */</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getCheckpointFile</span></span>(): <span class="type">Optional</span>[<span class="type">String</span>] = &#123;</div><div class="line">  <span class="type">JavaUtils</span>.optionToOptional(rdd.getCheckpointFile)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="toDebugString"><a href="#toDebugString" class="headerlink" title="toDebugString"></a>toDebugString</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/** A description of this RDD and its recursive dependencies for debugging.</span></div><div class="line">  * 对该RDD及其对调试的递归依赖的描述。</div><div class="line">  * */</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">toDebugString</span></span>(): <span class="type">String</span> = &#123;</div><div class="line">  rdd.toDebugString</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="top"><a href="#top" class="headerlink" title="top"></a>top</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">  * Returns the top k (largest) elements from this RDD as defined by</div><div class="line">  * the specified Comparator[T] and maintains the order.</div><div class="line">  * 根据指定的比较器[T]，从这个RDD中返回最大的k(最大)元素，并维护顺序。</div><div class="line">  *</div><div class="line">  *</div><div class="line">  * @note this method should only be used if the resulting array is expected to be small, as</div><div class="line">  * all the data is loaded into the driver's memory.</div><div class="line">  * 该方法只在预期的数组很小的情况下使用，因为所有的数据都被加载到驱动程序的内存中。</div><div class="line">  *</div><div class="line">  * @param num k, the number of top elements to return  返回的元素数量</div><div class="line">  * @param comp the comparator that defines the order  定义排序的比较器</div><div class="line">  * @return an array of top elements  返回最大元素的数组</div><div class="line">  */</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">top</span></span>(num: <span class="type">Int</span>, comp: <span class="type">Comparator</span>[<span class="type">T</span>]): <span class="type">JList</span>[<span class="type">T</span>] = &#123;</div><div class="line">  rdd.top(num)(<span class="type">Ordering</span>.comparatorToOrdering(comp)).toSeq.asJava</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">  * Returns the top k (largest) elements from this RDD using the</div><div class="line">  * natural ordering for T and maintains the order.</div><div class="line">  * 使用T的自然顺序，从这个RDD中返回最大的k(最大)元素，并维护顺序。</div><div class="line">  *</div><div class="line">  * @note this method should only be used if the resulting array is expected to be small, as</div><div class="line">  * all the data is loaded into the driver's memory.</div><div class="line">  * 该方法只在预期的数组很小的情况下使用，因为所有的数据都被加载到驱动程序的内存中。</div><div class="line">  *</div><div class="line">  * @param num k, the number of top elements to return  返回的元素数量</div><div class="line">  * @return an array of top elements 最大元素的数组</div><div class="line">  */</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">top</span></span>(num: <span class="type">Int</span>): <span class="type">JList</span>[<span class="type">T</span>] = &#123;</div><div class="line">  <span class="keyword">val</span> comp = com.google.common.collect.<span class="type">Ordering</span>.natural().asInstanceOf[<span class="type">Comparator</span>[<span class="type">T</span>]]</div><div class="line">  top(num, comp)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="takeOrdered"><a href="#takeOrdered" class="headerlink" title="takeOrdered"></a>takeOrdered</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">  * Returns the first k (smallest) elements from this RDD as defined by</div><div class="line">  * the specified Comparator[T] and maintains the order.</div><div class="line">  * 从这个RDD中返回第一个k(最小)元素，由指定的Comparator[T]定义，并维护该顺序。</div><div class="line">  *</div><div class="line">  *</div><div class="line">  * @note this method should only be used if the resulting array is expected to be small, as</div><div class="line">  * all the data is loaded into the driver's memory.</div><div class="line">  * 该方法只在预期的数组很小的情况下使用，因为所有的数据都被加载到驱动程序的内存中。</div><div class="line">  *</div><div class="line">  * @param num k, the number of elements to return  返回的元素数量</div><div class="line">  * @param comp the comparator that defines the order  排序比较器</div><div class="line">  * @return an array of top elements  元素数组</div><div class="line">  */</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">takeOrdered</span></span>(num: <span class="type">Int</span>, comp: <span class="type">Comparator</span>[<span class="type">T</span>]): <span class="type">JList</span>[<span class="type">T</span>] = &#123;</div><div class="line">  rdd.takeOrdered(num)(<span class="type">Ordering</span>.comparatorToOrdering(comp)).toSeq.asJava</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">  * Returns the first k (smallest) elements from this RDD using the</div><div class="line">  * natural ordering for T while maintain the order.</div><div class="line">  * 使用原生的 T排序比较器，返回 k个 最小值，并维护这个顺序</div><div class="line">  *</div><div class="line">  * @note this method should only be used if the resulting array is expected to be small, as</div><div class="line">  * all the data is loaded into the driver's memory.</div><div class="line">  * 尽量应用于小的数组，因为会加载到driver内存中。</div><div class="line">  * @param num k, the number of top elements to return</div><div class="line">  * @return an array of top elements</div><div class="line">  */</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">takeOrdered</span></span>(num: <span class="type">Int</span>): <span class="type">JList</span>[<span class="type">T</span>] = &#123;</div><div class="line">  <span class="keyword">val</span> comp = com.google.common.collect.<span class="type">Ordering</span>.natural().asInstanceOf[<span class="type">Comparator</span>[<span class="type">T</span>]]</div><div class="line">  takeOrdered(num, comp)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="max"><a href="#max" class="headerlink" title="max"></a>max</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">  * Returns the maximum element from this RDD as defined by the specified</div><div class="line">  * Comparator[T].</div><div class="line">  * 按照指定比较器[T]定义的RDD，</div><div class="line">  * 返回最大元素。</div><div class="line">  *</div><div class="line">  * @param comp the comparator that defines ordering  指定的比较器</div><div class="line">  * @return the maximum of the RDD  最大值</div><div class="line">  */</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">max</span></span>(comp: <span class="type">Comparator</span>[<span class="type">T</span>]): <span class="type">T</span> = &#123;</div><div class="line">  rdd.max()(<span class="type">Ordering</span>.comparatorToOrdering(comp))</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="min"><a href="#min" class="headerlink" title="min"></a>min</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">  * Returns the minimum element from this RDD as defined by the specified</div><div class="line">  * Comparator[T].</div><div class="line">  * 按照指定比较器[T]定义的RDD，</div><div class="line">  * 返回最小元素。</div><div class="line">  *</div><div class="line">  * @param comp the comparator that defines ordering   指定的比较器</div><div class="line">  * @return the minimum of the RDD  最小值</div><div class="line">  */</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">min</span></span>(comp: <span class="type">Comparator</span>[<span class="type">T</span>]): <span class="type">T</span> = &#123;</div><div class="line">  rdd.min()(<span class="type">Ordering</span>.comparatorToOrdering(comp))</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="countApproxDistinct"><a href="#countApproxDistinct" class="headerlink" title="countApproxDistinct"></a>countApproxDistinct</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* Return approximate number of distinct elements in the RDD.</div><div class="line">* 返回RDD中不重复元素的数量近似数。</div><div class="line">*</div><div class="line">* The algorithm used is based on streamlib's implementation of "HyperLogLog in Practice:</div><div class="line">* Algorithmic Engineering of a State of The Art Cardinality Estimation Algorithm", available</div><div class="line">  * &lt;a href="http://dx.doi.org/10.1145/2452376.2452456"&gt;here&lt;/a&gt;.</div><div class="line">  * 所使用的算法是基于streamlib在实践中的“HyperLogLog”的实现:</div><div class="line">  * “一种艺术基数估计算法状态的算法工程”，</div><div class="line">  *</div><div class="line">  *</div><div class="line">  * @param relativeSD Relative accuracy. Smaller values create counters that require more space.</div><div class="line">  *                   It must be greater than 0.000017.</div><div class="line">  *                   相对精度。</div><div class="line">  *                   较小的值创建需要更多空间的计数器。</div><div class="line">  *                   它必须大于0.000017。</div><div class="line">  */</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">countApproxDistinct</span></span>(relativeSD: <span class="type">Double</span>): <span class="type">Long</span> = rdd.countApproxDistinct(relativeSD)</div></pre></td></tr></table></figure>
<h3 id="countAsync"><a href="#countAsync" class="headerlink" title="countAsync"></a>countAsync</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">  * The asynchronous version of `count`, which returns a</div><div class="line">  * future for counting the number of elements in this RDD.</div><div class="line">  * “count”的异步版本，它为计算这个RDD中元素的数量返回一个未来。</div><div class="line">  */</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">countAsync</span></span>(): <span class="type">JavaFutureAction</span>[jl.<span class="type">Long</span>] = &#123;</div><div class="line"><span class="keyword">new</span> <span class="type">JavaFutureActionWrapper</span>[<span class="type">Long</span>, jl.<span class="type">Long</span>](rdd.countAsync(), jl.<span class="type">Long</span>.valueOf)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="collectAsync"><a href="#collectAsync" class="headerlink" title="collectAsync"></a>collectAsync</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">  * The asynchronous version of `collect`, which returns a future for</div><div class="line">  * retrieving an array containing all of the elements in this RDD.</div><div class="line">  * “collect”的异步版本，</div><div class="line">  * 它返回一个用于检索包含该RDD中所有元素的数组的未来。</div><div class="line">  *</div><div class="line">  * @note this method should only be used if the resulting array is expected to be small, as</div><div class="line">  * all the data is loaded into the driver's memory.</div><div class="line">  * 尽量应用于小数量数组。</div><div class="line">  */</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">collectAsync</span></span>(): <span class="type">JavaFutureAction</span>[<span class="type">JList</span>[<span class="type">T</span>]] = &#123;</div><div class="line"><span class="keyword">new</span> <span class="type">JavaFutureActionWrapper</span>(rdd.collectAsync(), (x: <span class="type">Seq</span>[<span class="type">T</span>]) =&gt; x.asJava)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="takeAsync"><a href="#takeAsync" class="headerlink" title="takeAsync"></a>takeAsync</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">  * The asynchronous version of the `take` action, which returns a</div><div class="line">  * future for retrieving the first `num` elements of this RDD.</div><div class="line">  * “take”操作的异步版本，</div><div class="line">  * 它将返回用于检索此RDD的第一个“num”元素的未来。</div><div class="line">  *</div><div class="line">  * @note this method should only be used if the resulting array is expected to be small, as</div><div class="line">  * all the data is loaded into the driver's memory.</div><div class="line">  */</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">takeAsync</span></span>(num: <span class="type">Int</span>): <span class="type">JavaFutureAction</span>[<span class="type">JList</span>[<span class="type">T</span>]] = &#123;</div><div class="line"><span class="keyword">new</span> <span class="type">JavaFutureActionWrapper</span>(rdd.takeAsync(num), (x: <span class="type">Seq</span>[<span class="type">T</span>]) =&gt; x.asJava)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="foreachAsync"><a href="#foreachAsync" class="headerlink" title="foreachAsync"></a>foreachAsync</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">  * The asynchronous version of the `foreach` action, which</div><div class="line">  * applies a function f to all the elements of this RDD.</div><div class="line">  * “foreach”操作的异步版本，</div><div class="line">  * 它将函数f应用于这个RDD的所有元素。</div><div class="line">  *</div><div class="line">  */</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">foreachAsync</span></span>(f: <span class="type">VoidFunction</span>[<span class="type">T</span>]): <span class="type">JavaFutureAction</span>[<span class="type">Void</span>] = &#123;</div><div class="line"><span class="keyword">new</span> <span class="type">JavaFutureActionWrapper</span>[<span class="type">Unit</span>, <span class="type">Void</span>](rdd.foreachAsync(x =&gt; f.call(x)),</div><div class="line">&#123; x =&gt; <span class="literal">null</span>.asInstanceOf[<span class="type">Void</span>] &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="foreachPartitionAsync"><a href="#foreachPartitionAsync" class="headerlink" title="foreachPartitionAsync"></a>foreachPartitionAsync</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">  * The asynchronous version of the `foreachPartition` action, which</div><div class="line">  * applies a function f to each partition of this RDD.</div><div class="line">  * “foreachPartition”操作的异步版本，</div><div class="line">  * 它将函数f应用于该RDD的每个分区。</div><div class="line">  */</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">foreachPartitionAsync</span></span>(f: <span class="type">VoidFunction</span>[<span class="type">JIterator</span>[<span class="type">T</span>]]): <span class="type">JavaFutureAction</span>[<span class="type">Void</span>] = &#123;</div><div class="line"><span class="keyword">new</span> <span class="type">JavaFutureActionWrapper</span>[<span class="type">Unit</span>, <span class="type">Void</span>](rdd.foreachPartitionAsync(x =&gt; f.call(x.asJava)),</div><div class="line">&#123; x =&gt; <span class="literal">null</span>.asInstanceOf[<span class="type">Void</span>] &#125;)</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<!--对不起，到时间了，请停止装逼-->
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[spark取样函数分析]]></title>
      <url>https://stanxia.github.io/2017/11/08/spark%E5%8F%96%E6%A0%B7%E5%87%BD%E6%95%B0%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p><img src="/images/pic/bg4.jpg" alt="pic1"></p>
<div class="note info"><p>Spark取样操作</p>
<p>无法获取随机样本的解决方案</p></div>
<a id="more"></a>
<!--请开始装逼-->
<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>Dataset中sample函数源码如下：</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">   * Returns a new [[Dataset]] by sampling a fraction of rows, using a user-supplied seed.</div><div class="line">   *</div><div class="line">   * @param withReplacement Sample with replacement or not.</div><div class="line">   * @param fraction Fraction of rows to generate. 每行数据被抽样的概率</div><div class="line">   * @param seed Seed for sampling.随机生成器的种子，起始值。如果seed一样，则每次的随机数都一样。</div><div class="line">   *</div><div class="line">   * @note This is NOT guaranteed to provide exactly the fraction of the count</div><div class="line">   * of the given [[Dataset]].并不能保证提供按照分数得出的结果，经过实际验证，确实如此。</div><div class="line">   *</div><div class="line">   * @group typedrel</div><div class="line">   * @since 1.6.0</div><div class="line">   */</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">sample</span></span>(withReplacement: <span class="type">Boolean</span>, fraction: <span class="type">Double</span>, seed: <span class="type">Long</span>): <span class="type">Dataset</span>[<span class="type">T</span>] = &#123;</div><div class="line">    require(fraction &gt;= <span class="number">0</span>,</div><div class="line">      <span class="string">s"Fraction must be nonnegative, but got <span class="subst">$&#123;fraction&#125;</span>"</span>)</div><div class="line"></div><div class="line">    withTypedPlan &#123;</div><div class="line">      <span class="type">Sample</span>(<span class="number">0.0</span>, fraction, withReplacement, seed, logicalPlan)()</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">   * Returns a new [[Dataset]] by sampling a fraction of rows, using a random seed.</div><div class="line">   *</div><div class="line">   * @param withReplacement Sample with replacement or not.</div><div class="line">   * @param fraction Fraction of rows to generate.</div><div class="line">   *</div><div class="line">   * @note This is NOT guaranteed to provide exactly the fraction of the total count</div><div class="line">   * of the given [[Dataset]].</div><div class="line">   * 这里seed直接用生成的随机数代替。</div><div class="line">   * @group typedrel</div><div class="line">   * @since 1.6.0</div><div class="line">   */</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">sample</span></span>(withReplacement: <span class="type">Boolean</span>, fraction: <span class="type">Double</span>): <span class="type">Dataset</span>[<span class="type">T</span>] = &#123;</div><div class="line">    sample(withReplacement, fraction, <span class="type">Utils</span>.random.nextLong)</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>结果数据的行数一般在（fraction*总数）左右。没有一个固定的值，如果需要得到固定行数的随机数据的话不建议采用该方法。</p>
<h2 id="办法"><a href="#办法" class="headerlink" title="办法"></a>办法</h2><p>获取随机取样的替代方法：</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">df.createOrReplaceTempView(<span class="string">"test_sample"</span>); <span class="comment">// 生成临时表</span></div><div class="line">df.sqlContext() <span class="comment">// 添加随机数列，并根据其进行排序</span></div><div class="line">        .sql(<span class="string">"select * ,rand() as random from test_sample order by random"</span>)</div><div class="line">        .limit(<span class="number">2</span>) <span class="comment">// 根据参数的fraction计算需要获取的取样结果</span></div><div class="line">        .drop(<span class="string">"random"</span>) <span class="comment">// 删除掉添加的随机列</span></div><div class="line">        .show();</div></pre></td></tr></table></figure>
<!--对不起，到时间了，请停止装逼-->]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[spark源码注释翻译]]></title>
      <url>https://stanxia.github.io/2017/11/06/spark%E6%BA%90%E7%A0%81%E6%B3%A8%E9%87%8A%E7%BF%BB%E8%AF%91/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p><img src="/images/pic/bg.png" alt="pic1"></p>
<div class="note info"><p>版本：spark2.1.1</p>
<p>目的：方便中文用户阅读源码，把时间花在理解而不是翻译上</p></div>
<a id="more"></a>
<!--请开始装逼-->
<h2 id="初衷"><a href="#初衷" class="headerlink" title="初衷"></a>初衷</h2><p>开始立项进行翻译，一方面方便日后阅读源码，另一方面先粗粒度的熟悉下spark框架和组件。优化完之后希望能帮助更多的中文用户，节省翻译时间。</p>
<h2 id="进度"><a href="#进度" class="headerlink" title="进度"></a>进度</h2><p>已完成：</p>
<p>正在作：spark core模块</p>
<table>
<thead>
<tr>
<th style="text-align:center">模块名</th>
<th style="text-align:center">模块介绍</th>
<th style="text-align:center">完成度</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">api</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">broadcast</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">deploy</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">executor</td>
<td style="text-align:center">执行器：用于启动线程池，是真正负责执行task的部件</td>
<td style="text-align:center">已完成</td>
</tr>
<tr>
<td style="text-align:center">input</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">internal</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">io</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">launcher</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">mapred</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">memory</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">metrics</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">network</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">partial</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">rdd</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">rpc</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">scheduler</td>
<td style="text-align:center">调度器：spark应用程序的任务调度器</td>
<td style="text-align:center">正在作</td>
</tr>
<tr>
<td style="text-align:center">security</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">serializer</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">shuffle</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">status.api.v1</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">storage</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">util</td>
<td style="text-align:center"></td>
</tr>
</tbody>
</table>
<!--对不起，到时间了，请停止装逼-->
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[spark关于parquet的优化]]></title>
      <url>https://stanxia.github.io/2017/11/01/spark%E5%85%B3%E4%BA%8Eparquet%E7%9A%84%E4%BC%98%E5%8C%96/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p><img src="/images/pic/sn5.jpg" alt="kawayi"></p>
<div class="note info"><p>Parquet列式存储在sparkSQL中的应用</p></div>
<a id="more"></a>
<!--请开始装逼-->
<h2 id="Parquet的简介"><a href="#Parquet的简介" class="headerlink" title="Parquet的简介"></a>Parquet的简介</h2><p>parquet是一种列式存储。可以提供面向列的存储和查询。</p>
<h2 id="Parquet的优势"><a href="#Parquet的优势" class="headerlink" title="Parquet的优势"></a>Parquet的优势</h2><p>在sparkSQL程序中使用parquet格式存储文件，在存储空间和查询性能方面都有很高的效率。</p>
<h3 id="存储方面"><a href="#存储方面" class="headerlink" title="存储方面"></a>存储方面</h3><p>因为是面向列的存储，同一列的类型相同，因而在存储的过程中可以使用更高效的压缩方案，可以节省大量的存储空间。</p>
<h3 id="查询方面"><a href="#查询方面" class="headerlink" title="查询方面"></a>查询方面</h3><p>在执行查询任务时，只会扫描需要的列，而不是全部，高度灵活性使查询变得非常高效。</p>
<h3 id="实例测试"><a href="#实例测试" class="headerlink" title="实例测试"></a>实例测试</h3><table>
<thead>
<tr>
<th>测试数据大小</th>
<th>存储类型</th>
<th>存储所占空间</th>
<th>查询性能</th>
</tr>
</thead>
<tbody>
<tr>
<td>1T</td>
<td>TEXTFILE</td>
<td>897.9G</td>
<td>698s</td>
</tr>
<tr>
<td>1T</td>
<td>Parquet</td>
<td>231.4G</td>
<td>21s</td>
</tr>
</tbody>
</table>
<h2 id="Parquet的使用"><a href="#Parquet的使用" class="headerlink" title="Parquet的使用"></a>Parquet的使用</h2><p>使用parquet的简单demo：</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Encoders for most common types are automatically provided by importing spark.implicits._</span></div><div class="line"><span class="keyword">import</span> spark.implicits._</div><div class="line"></div><div class="line"><span class="keyword">val</span> peopleDF = spark.read.json(<span class="string">"examples/src/main/resources/people.json"</span>)</div><div class="line"></div><div class="line"><span class="comment">// DataFrames can be saved as Parquet files, maintaining the schema information</span></div><div class="line">peopleDF.write.parquet(<span class="string">"people.parquet"</span>)</div><div class="line"></div><div class="line"><span class="comment">// Read in the parquet file created above</span></div><div class="line"><span class="comment">// Parquet files are self-describing so the schema is preserved</span></div><div class="line"><span class="comment">// The result of loading a Parquet file is also a DataFrame</span></div><div class="line"><span class="keyword">val</span> parquetFileDF = spark.read.parquet(<span class="string">"people.parquet"</span>)</div><div class="line"></div><div class="line"><span class="comment">// Parquet files can also be used to create a temporary view and then used in SQL statements</span></div><div class="line">parquetFileDF.createOrReplaceTempView(<span class="string">"parquetFile"</span>)</div><div class="line"><span class="keyword">val</span> namesDF = spark.sql(<span class="string">"SELECT name FROM parquetFile WHERE age BETWEEN 13 AND 19"</span>)</div><div class="line">namesDF.map(attributes =&gt; <span class="string">"Name: "</span> + attributes(<span class="number">0</span>)).show()</div><div class="line"><span class="comment">// +------------+</span></div><div class="line"><span class="comment">// |       value|</span></div><div class="line"><span class="comment">// +------------+</span></div><div class="line"><span class="comment">// |Name: Justin|</span></div><div class="line"><span class="comment">// +------------+</span></div></pre></td></tr></table></figure>
<!--对不起，到时间了，请停止装逼-->
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[三步走战略]]></title>
      <url>https://stanxia.github.io/2017/11/01/%E4%B8%89%E6%AD%A5%E8%B5%B0%E6%88%98%E7%95%A5/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p><img src="/images/pic/sn2.jpg" alt="s"></p>
<div class="note info"><p>设定中长期规划</p>
<p>稳扎稳打，逐个击破，实现技术上的重大突破</p></div>
<a id="more"></a>
<!--请开始装逼-->
<h2 id="第一步深刻了解spark运行机制"><a href="#第一步深刻了解spark运行机制" class="headerlink" title="第一步深刻了解spark运行机制"></a>第一步深刻了解spark运行机制</h2><h2 id="第二步深度剖析sparkSQL和sparkStreaming"><a href="#第二步深度剖析sparkSQL和sparkStreaming" class="headerlink" title="第二步深度剖析sparkSQL和sparkStreaming"></a>第二步深度剖析sparkSQL和sparkStreaming</h2><h2 id="第三步实现对spark机器学习的深度掌握"><a href="#第三步实现对spark机器学习的深度掌握" class="headerlink" title="第三步实现对spark机器学习的深度掌握"></a>第三步实现对spark机器学习的深度掌握</h2><!--对不起，到时间了，请停止装逼-->
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[手把手搭建vps和shadowsocks]]></title>
      <url>https://stanxia.github.io/2017/10/31/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%90%AD%E5%BB%BAvps%E5%92%8Cshadowsocks/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p><img src="/images/pic/free.jpg" alt="s"></p>
<div class="note info"><p>何来的枷锁</p>
<p>没有人应该被困在牢笼之中</p></div>
<a id="more"></a>
<!--请开始装逼-->
<!--视频start-->
<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>记性不好，做个记录，日后有需要时难得费神。</p>
<h2 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h2><p>了解一些原理，熟悉一些名词，也方便理解接下来安装过程中的操作。</p>
<h3 id="vps"><a href="#vps" class="headerlink" title="vps"></a>vps</h3><p>VPS(Virtual private server) 译作虚拟专用伺服器。你可以把它简单地理解为一台在远端的强劲电脑。当你租用了它以后，可以给它安装操作系统、软件，并通过一些工具连接和远程操控它。</p>
<h3 id="vultr"><a href="#vultr" class="headerlink" title="vultr"></a>vultr</h3><p><a href="https://www.vultr.com/" target="_blank" rel="external">Vultr</a> 是一家 VPS 服务器提供商，有美国、亚洲、欧洲等多地的 VPS。它家的服务器以性价比高闻名，按时间计费，最低的资费为每月 $2.5。</p>
<h3 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h3><p>Linux 是免费开源的操作系统，大概被世界上过半服务器所采用。有大量优秀的开源软件可以安装，上述 Shadowsocks 就是其一。你可以通过命令行来直接给 Linux 操作系统「下命令」，比如 $ cd ~/Desktop 就是进入你根目录下的 Desktop 文件夹。</p>
<h3 id="ssh"><a href="#ssh" class="headerlink" title="ssh"></a>ssh</h3><p> SSH 是一种网络协议，作为每一台 Linux 电脑的标准配置，用于计算机之间的加密登录。当你为租用的 VPS 安装 Linux 系统后，只要借助一些工具，就可以用 SSH 在你自己的 Mac/PC 电脑上远程登录该 VPS 了。</p>
<h3 id="shadowsocks"><a href="#shadowsocks" class="headerlink" title="shadowsocks"></a>shadowsocks</h3><p>Shadowsocks(ss) 是由 <a href="https://github.com/Clowwindy" target="_blank" rel="external">Clowwindy</a> 开发的一款软件，其作用本来是加密传输资料。当然，也正因为它加密传输资料的特性，使得 GFW 没法将由它传输的资料和其他普通资料区分开来，也就不能干扰我们访问那些「不存在」的网站了。</p>
<p><img src="/images/pic/1.png" alt="121"></p>
<h2 id="搭建vps"><a href="#搭建vps" class="headerlink" title="搭建vps"></a>搭建vps</h2><p>目的就是搭建梯子。无建站的需求。推荐vultr，最便宜的有2.5美元一个月。500g流量完全够用了。且现在支持支付宝付款，颇为方便。现阶段的优惠活动是新注册的用户完成指定的任务会获得3美元的奖励。（详细情况可依参见官网。）</p>
<h3 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h3><p>首先点击右侧注册链接：<a href="https://www.vultr.com/?ref=7008162" target="_blank" rel="external">https://www.vultr.com/2017Promo</a>，然后会来到下图所示的注册页面。</p>
<p><img src="https://www.vultr.net.cn/resources/images/goumai-01.png" alt="11"></p>
<p>第一个框中填写注册邮箱，第二个框中填写注册密码（至少包含1个小写字母、1个大写字母和1个数字），最后点击Create Account创建账户。</p>
<p>创建账户后注册邮箱会收到一封验证邮件，我们需要点击Verify Your E-mail来验证邮箱。</p>
<p>如果注册邮箱收不到验证邮件请更换注册邮箱后重复第一步。</p>
<p><img src="https://www.vultr.net.cn/resources/images/goumai-02.png" alt="12"></p>
<p>验证邮箱后我们会来到下图所示的登录界面，按下图中指示填写信息，然后点击Login登录。</p>
<p><img src="https://www.vultr.net.cn/resources/images/goumai-03.png" alt="13"></p>
<p>登陆后我们会来到充值界面。Vultr要求新账户充值后才可以正常创建服务器。Vultr已经支持支付宝了，在这里推荐大家使用支付宝充值，最低金额为10美元。</p>
<p><img src="https://www.vultr.net.cn/resources/images/goumai-04.png" alt="14"></p>
<h3 id="购买"><a href="#购买" class="headerlink" title="购买"></a>购买</h3><p>充值完毕后点击右上角的蓝色加号按钮进入创建服务器界面。</p>
<p>首先需要选择Server Location即机房位置，从左到右、从上到下依次为东京、新加坡、伦敦、法兰克福、巴黎、阿姆斯特丹、迈阿密、亚特兰大、芝加哥、硅谷、达拉斯、洛杉矶、纽约、西雅图、悉尼。</p>
<p><img src="https://www.vultr.net.cn/resources/images/goumai-06.png" alt="16"></p>
<p>然后需要选择Server Type即服务类型，这里大家需要选择安装Debian 7 x64系统，因为这个系统折腾起来比较容易，搭建东西也简单便捷。</p>
<p><img src="https://www.vultr.net.cn/resources/images/goumai-07.png" alt="17"></p>
<p>然后需要选择Server Size即方案类型，这里大家可以按照需要自行选择，如果只是普通使用那么选择第二个5美元方案即可。</p>
<p><img src="https://www.vultr.net.cn/resources/images/goumai-08.png" alt="111"></p>
<p>然后Additional Features、Startup Script、SSH Keys以及Server Hostname &amp; Label等四部分大家保持默认即可，最后点击右下方的蓝色Deploy Now按钮确认创建服务器。</p>
<p><img src="https://www.vultr.net.cn/resources/images/goumai-09.png" alt="222"></p>
<p>创建服务器后我们会看到下图所示界面。</p>
<p><img src="https://www.vultr.net.cn/resources/images/goumai-10.png" alt="22"></p>
<p>上图中我们需要耐心等待3~4分钟，等红色Installing字变为绿色Running字后，点击Cloud Instance即可进入服务器详细信息界面，如下图所示。</p>
<p><img src="https://www.vultr.net.cn/resources/images/goumai-11.png" alt="33"></p>
<p>左侧红框内四行信息依次为机房位置、IP地址、登录用户名、登录密码。IP地址后面的按钮为复制IP地址，登录密码后面的按钮为复制密码及显示/隐藏密码。右上角红框内后面四个按钮分别是关闭服务器、重启服务器、重装系统、删除服务器。</p>
<h2 id="远程登录"><a href="#远程登录" class="headerlink" title="远程登录"></a>远程登录</h2><p>安装远程登录软件。这里以windos端的xshell为例。使用mac的同学可以下载iTerm。</p>
<p>下载安装后打开软件。根据下图中的指示，我们点击会话框中的新建按钮。</p>
<p><img src="https://www.vultr.net.cn/resources/images/ssh-001.png" alt="111"></p>
<p>点击新建按钮后会弹出下图所示界面。根据图中指示，我们首先填写IP地址，然后点击确定按钮。</p>
<p><img src="https://www.vultr.net.cn/resources/images/ssh-002.png" alt="333"></p>
<p>点击确定按钮后我们会回到下图所示界面。根据图中指示，我们双击打开新建会话或者点击下方连接按钮打开新建会话。</p>
<p><img src="https://www.vultr.net.cn/resources/images/ssh-003.png" alt="444"></p>
<p>开新建会话后会弹出下图所示界面。根据图中指示，我们点击接受并保存按钮。</p>
<p><img src="https://www.vultr.net.cn/resources/images/ssh-004.png" alt="555"></p>
<p>点击接受并保存按钮会弹出下图所示界面。根据图中指示，我们首先填写SSH连接密码，然后打钩记住密码，最后点击确定按钮。</p>
<p>如果提示需要输入用户名（登录名），那么请输入root！</p>
<p><img src="https://www.vultr.net.cn/resources/images/ssh-005.png" alt="56"></p>
<p>点击确定按钮后服务器会自动连接，连接完毕后我们会来到下图所示界面</p>
<p><img src="https://www.vultr.net.cn/resources/images/ssh-006.png" alt="7"></p>
<h2 id="部署shadowsocks"><a href="#部署shadowsocks" class="headerlink" title="部署shadowsocks"></a>部署shadowsocks</h2><p>这里采用网上整理的一键部署的方案。简单方便操作。 </p>
<p>首先复制以下内容：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget -N --no-check-certificate https://0123.cool/download/55r.sh &amp;&amp; chmod +x 55r.sh &amp;&amp; ./55r.sh</div></pre></td></tr></table></figure>
<p>然后回到Xshell软件，右击选择粘贴，粘贴完毕后回车继续。</p>
<p><img src="https://www.vultr.net.cn/resources/images/ssr-001.png" alt="i"></p>
<p>回车后系统会自行下载脚本文件并运行。根据下图图中指示，我们依次输入SSR的各项连接信息，最后回车继续。</p>
<p><img src="https://www.vultr.net.cn/resources/images/ssr-002.png" alt="2"></p>
<p>安装完成后会出现下图所示界面。根据图中指示，我们将红框圈中的信息保存到记事本内。</p>
<p><img src="https://www.vultr.net.cn/resources/images/ssr-003.png" alt="3"></p>
<h2 id="配置锐意加速"><a href="#配置锐意加速" class="headerlink" title="配置锐意加速"></a>配置锐意加速</h2><p>根据下图图中指示，我们继续复制下列信息：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget -N --no-check-certificate https://0123.cool/download/rs.sh &amp;&amp; bash rs.sh install</div></pre></td></tr></table></figure>
<p>然后回到Xshell软件，右击选择粘贴，粘贴完毕后回车继续。</p>
<p><img src="https://www.vultr.net.cn/resources/images/rs-001-2.png" alt="4"></p>
<p>回车后系统会自行下载脚本文件并运行。根据下图图中指示，我们依次输入锐速的各项配置信息，最后回车继续。</p>
<p><img src="https://www.vultr.net.cn/resources/images/rs-002.png" alt="5"></p>
<p>回车后，系统自动执行命令完成破解版锐速安装，如下图所示。</p>
<p><img src="https://www.vultr.net.cn/resources/images/rs-003.png" alt="6"></p>
<p>我们首先输入：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">reboot</div></pre></td></tr></table></figure>
<p>然后回车，Xshell会断开连接，系统会在1分钟后重启完毕，此时可以关闭Xshell软件了。</p>
<p>搭建教程到此结束，亲测成功。如果不能连接的，请检查自己的每一步操作。</p>
<!--视频end-->
<!--对不起，到时间了，请停止装逼-->
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[spark报错集]]></title>
      <url>https://stanxia.github.io/2017/10/30/spark%E6%8A%A5%E9%94%99%E9%9B%86/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p><img src="/images/pic/sn4.jpg" alt="eroor"></p>
<div class="note info"><p>魔高一尺</p>
<p>道高一丈</p></div>
<a id="more"></a>
<!--请开始装逼-->
<h2 id="有话要说"><a href="#有话要说" class="headerlink" title="有话要说"></a>有话要说</h2><p>针对一个老毛病：有些错误屡犯屡改，屡改屡犯，没有引起根本上的注意，或者没有从源头理解错误发生的底层原理，导致做很多无用功。</p>
<p>总结历史，并从中吸取教训，减少无用功造成的时间浪费。特此将从目前遇到的spark问题全部记录在这里，搞清楚问题，自信向前。</p>
<h2 id="问题汇总"><a href="#问题汇总" class="headerlink" title="问题汇总"></a>问题汇总</h2><h3 id="关键词：spark-hive"><a href="#关键词：spark-hive" class="headerlink" title="关键词：spark-hive"></a>关键词：spark-hive</h3><h4 id="概述："><a href="#概述：" class="headerlink" title="概述："></a>概述：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Exception in thread &quot;main&quot; java.lang.IllegalArgumentException: Unable to instantiate SparkSession with Hive support because Hive classes are not found.</div></pre></td></tr></table></figure>
<h4 id="场景："><a href="#场景：" class="headerlink" title="场景："></a>场景：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">在本地调试spark程序，连接虚拟机上的集群，尝试执行sparkSQL时，启动任务就报错。</div></pre></td></tr></table></figure>
<h4 id="原理："><a href="#原理：" class="headerlink" title="原理："></a>原理：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">缺少sparkSQL连接hive的必要和依赖jar包</div></pre></td></tr></table></figure>
<h4 id="办法："><a href="#办法：" class="headerlink" title="办法："></a>办法：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">在项目／模块的pom.xml中添加相关的spark-hive依赖jar包。</div><div class="line">&lt;!-- https://mvnrepository.com/artifact/org.apache.spark/spark-hive_2.11 --&gt;</div><div class="line">&lt;dependency&gt;</div><div class="line">    &lt;groupId&gt;org.apache.spark&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;spark-hive_2.11&lt;/artifactId&gt;</div><div class="line">    &lt;version&gt;2.1.1&lt;/version&gt;</div><div class="line">    &lt;scope&gt;provided&lt;/scope&gt;</div><div class="line">&lt;/dependency&gt;</div><div class="line">重新编译项目／模块即可。</div></pre></td></tr></table></figure>
<hr>
<!--对不起，到时间了，请停止装逼-->]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[life]]></title>
      <url>https://stanxia.github.io/2017/10/29/life/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p><img src="/images/pic/life.jpeg" alt="pic1"></p>
<div class="note info"><p>Life is simple &amp;&amp; funny.</p></div>
<a id="more"></a>
<!--请开始装逼-->
<!--视频start-->
<div id="dplayer0" class="dplayer" style="margin-bottom: 20px;"></div><script>var dplayer0 = new DPlayer({"element":document.getElementById("dplayer0"),"autoplay":false,"theme":"#FADFA3","loop":true,"video":{"url":"xx","pic":"xx"}});</script>
<!--视频end-->
<!--对不起，到时间了，请停止装逼-->
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[杂乱无章]]></title>
      <url>https://stanxia.github.io/2017/10/29/%E6%9D%82%E4%B9%B1%E6%97%A0%E7%AB%A0/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p><img src="/images/pic/yekong.jpg" alt="yekong"></p>
<div class="note info"><p>时光的机器，加足马力冲回过去</p>
<p>历史的长河，丝丝涟漪涌向未来</p></div>
<a id="more"></a>
<!--请开始装逼-->
<p>道不清楚，说不明白，夜深人静的时候，说一些想到的废话。窗外隆隆作响，不知疲倦的机器不知疲倦的执行着不知疲倦的动作。窗内屏幕暗淡，双眼干涩，思索着宇宙外的回想。</p>
<p>小时候，望向星空，那时的天空群星闪烁，哪像现在，嘿，享受了大城市的霓虹，哪里再给你无垠的星空，贪。</p>
<p>躺在草地，微风轻拂脸颊，初秋的夜晚，有点微凉。</p>
<p>仰望星河，也想着外面的世界，多精彩。</p>
<p>揣摩着无垠的宇宙，翻过地球，越过银河，驶向无限拓展的星际，身上的烦恼，微风一吹，全散了。</p>
<p>风轻拂，静静望着天空，思考着外面的朋友或许也在渴望着远方的我，伸手触摸这天空，抓一把星辰贪婪的放入梦。</p>
<p>深邃的夜空，望不尽的远方，是光明中的无尽黑暗，也似黑暗道路的一束亮光，洒向我，思绪跟着遨游，呵，世界与我万千美好，我与世界却念念叨叨，琐琐碎碎，麻麻烦烦。心里是想放飞的。</p>
<p>夜深，车水呼啸，诉说着城市的不眠，可我困，关窗，闷。开窗，嘿，不知疲倦的机器又开始不知疲倦的执行不知疲倦的动作。这样的夜晚，眠难。</p>
<p>深夜思考，写作。夜使我宁静，内心的宁静，这白天的大城市给予不了。感谢夜的馈赠，接收这无上的加冕，驰骋在思绪的星空，痛快，精彩，精彩。</p>
<p>杂乱无章，呵，可以。</p>
<!--对不起，到时间了，请停止装逼-->
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[闲谈]]></title>
      <url>https://stanxia.github.io/2017/10/28/%E9%97%B2%E8%B0%88/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p><img src="/images/pic/xueshan.jpg" alt="xueshan"></p>
<div class="note info"><p>九九登高忆重阳</p></div>
<a id="more"></a>
<!--请开始装逼-->
<!--对不起，到时间了，请停止装逼-->
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[这个杀手不太冷]]></title>
      <url>https://stanxia.github.io/2017/10/28/%E8%BF%99%E4%B8%AA%E6%9D%80%E6%89%8B%E4%B8%8D%E5%A4%AA%E5%86%B7/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p><img src="/images/pic/killer.jpeg" alt="killer"></p>
<div class="note info"><p>Is life always this hard,or is it just when you’re a kid?</p>
<p>Always like this.</p></div>
<a id="more"></a>
<!--请开始装逼-->
<iframe src="https://www.bilibili.com/html/html5player.html?aid=8852258&cid=14604698" width="640" height="480" frameborder="0" webkitallowfullscreen="" mozallowfullscreen="" allowfullscreen></iframe>

<!--对不起，到时间了，请停止装逼-->
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[mac使用小技巧]]></title>
      <url>https://stanxia.github.io/2017/10/28/mac%E4%BD%BF%E7%94%A8%E5%B0%8F%E6%8A%80%E5%B7%A7/</url>
      <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><p><img src="/images/pic/sn1.jpg" alt="gaozhongshneg"></p>
<div class="note info"><p>记录mac使用的小技巧</p>
<p>持续更新ing </p></div>
<a id="more"></a>
<!--请开始装逼-->
<h2 id="隐藏小技巧"><a href="#隐藏小技巧" class="headerlink" title="隐藏小技巧"></a>隐藏小技巧</h2><h3 id="开启充电提示音（类似于iphone充电提示音，默认关闭）"><a href="#开启充电提示音（类似于iphone充电提示音，默认关闭）" class="headerlink" title="开启充电提示音（类似于iphone充电提示音，默认关闭）"></a>开启充电提示音（类似于iphone充电提示音，默认关闭）</h3><p>终端输入（开启）：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">defaults write com.apple.PowerChime ChimeOnAllHardware -bool true; open /System/Library/CoreServices/PowerChime.app &amp;</div></pre></td></tr></table></figure>
<p>关闭：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">defaults write com.apple.PowerChime ChimeOnAllHardware -bool false;killall PowerChime</div></pre></td></tr></table></figure>
<!-- more -->
<h2 id="隐藏文件夹"><a href="#隐藏文件夹" class="headerlink" title="隐藏文件夹"></a>隐藏文件夹</h2><p>更好的保护学习资料，有时候需要设置隐藏文件夹：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mv foldername .foldername</div></pre></td></tr></table></figure>
<h2 id="查看隐藏文件夹"><a href="#查看隐藏文件夹" class="headerlink" title="查看隐藏文件夹"></a>查看隐藏文件夹</h2><p>mac最新版本：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">⌘⇧.(Command + Shift + .)  #隐藏 和显示</div></pre></td></tr></table></figure>
<h2 id="Macbook-Pro-用外接显示器时，如何关闭笔记本屏幕，同时开盖使用"><a href="#Macbook-Pro-用外接显示器时，如何关闭笔记本屏幕，同时开盖使用" class="headerlink" title="Macbook Pro 用外接显示器时，如何关闭笔记本屏幕，同时开盖使用"></a>Macbook Pro 用外接显示器时，如何关闭笔记本屏幕，同时开盖使用</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo nvram boot-args=&quot;iog=0x0&quot; #(10.10以前版本)</div><div class="line">sudo nvram boot-args=&quot;niog=1&quot; #(10.10及以后版本)这个命令的意思就是外接显示器时关闭自身屏幕，重启生效</div></pre></td></tr></table></figure>
<p>开机流程：连上电源和外接显示器，按开机键，立即合盖，等外接显示器有信号时开盖即可如果报错 (已知 10.11/10.12 会报错)<br>nvram: Error setting variable - ‘boot-args’: (iokit/common) general error</p>
<ol>
<li>重启，按住command + r 进入恢复界面</li>
</ol>
<ol>
<li>左上角菜单里面找到终端，输入nvram boot-args=”niog=1”，回车问题解决。重启生效</li>
</ol>
<!--对不起，到时间了，请停止装逼-->
]]></content>
    </entry>
    
  
  
</search>
